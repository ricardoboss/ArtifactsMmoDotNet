// <auto-generated/>
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions.Store;
using System.Collections.Generic;
using System.IO;
using System;
namespace ArtifactsMmoDotNet.Api.Generated.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.16.0")]
    #pragma warning disable CS1591
    public partial class CharacterLeaderboardSchema : IBackedModel, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Achievements points.</summary>
        public int? AchievementsPoints
        {
            get { return BackingStore?.Get<int?>("achievements_points"); }
            set { BackingStore?.Set("achievements_points", value); }
        }
        /// <summary>Stores model information.</summary>
        public IBackingStore BackingStore { get; private set; }
        /// <summary>Cooking level.</summary>
        public int? CookingLevel
        {
            get { return BackingStore?.Get<int?>("cooking_level"); }
            set { BackingStore?.Set("cooking_level", value); }
        }
        /// <summary>Cooking total xp.</summary>
        public int? CookingTotalXp
        {
            get { return BackingStore?.Get<int?>("cooking_total_xp"); }
            set { BackingStore?.Set("cooking_total_xp", value); }
        }
        /// <summary>Fishing level.</summary>
        public int? FishingLevel
        {
            get { return BackingStore?.Get<int?>("fishing_level"); }
            set { BackingStore?.Set("fishing_level", value); }
        }
        /// <summary>Fishing total xp.</summary>
        public int? FishingTotalXp
        {
            get { return BackingStore?.Get<int?>("fishing_total_xp"); }
            set { BackingStore?.Set("fishing_total_xp", value); }
        }
        /// <summary>Gearcrafting level.</summary>
        public int? GearcraftingLevel
        {
            get { return BackingStore?.Get<int?>("gearcrafting_level"); }
            set { BackingStore?.Set("gearcrafting_level", value); }
        }
        /// <summary>Gearcrafting total xp.</summary>
        public int? GearcraftingTotalXp
        {
            get { return BackingStore?.Get<int?>("gearcrafting_total_xp"); }
            set { BackingStore?.Set("gearcrafting_total_xp", value); }
        }
        /// <summary>The numbers of golds on this character.</summary>
        public int? Gold
        {
            get { return BackingStore?.Get<int?>("gold"); }
            set { BackingStore?.Set("gold", value); }
        }
        /// <summary>Jewelrycrafting level.</summary>
        public int? JewelrycraftingLevel
        {
            get { return BackingStore?.Get<int?>("jewelrycrafting_level"); }
            set { BackingStore?.Set("jewelrycrafting_level", value); }
        }
        /// <summary>Jewelrycrafting total xp.</summary>
        public int? JewelrycraftingTotalXp
        {
            get { return BackingStore?.Get<int?>("jewelrycrafting_total_xp"); }
            set { BackingStore?.Set("jewelrycrafting_total_xp", value); }
        }
        /// <summary>Combat level.</summary>
        public int? Level
        {
            get { return BackingStore?.Get<int?>("level"); }
            set { BackingStore?.Set("level", value); }
        }
        /// <summary>Mining level.</summary>
        public int? MiningLevel
        {
            get { return BackingStore?.Get<int?>("mining_level"); }
            set { BackingStore?.Set("mining_level", value); }
        }
        /// <summary>Mining total xp.</summary>
        public int? MiningTotalXp
        {
            get { return BackingStore?.Get<int?>("mining_total_xp"); }
            set { BackingStore?.Set("mining_total_xp", value); }
        }
        /// <summary>Character name.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Name
        {
            get { return BackingStore?.Get<string?>("name"); }
            set { BackingStore?.Set("name", value); }
        }
#nullable restore
#else
        public string Name
        {
            get { return BackingStore?.Get<string>("name"); }
            set { BackingStore?.Set("name", value); }
        }
#endif
        /// <summary>Character skin code.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Skin
        {
            get { return BackingStore?.Get<string?>("skin"); }
            set { BackingStore?.Set("skin", value); }
        }
#nullable restore
#else
        public string Skin
        {
            get { return BackingStore?.Get<string>("skin"); }
            set { BackingStore?.Set("skin", value); }
        }
#endif
        /// <summary>Total XP of your character.</summary>
        public int? TotalXp
        {
            get { return BackingStore?.Get<int?>("total_xp"); }
            set { BackingStore?.Set("total_xp", value); }
        }
        /// <summary>Weaponcrafting level.</summary>
        public int? WeaponcraftingLevel
        {
            get { return BackingStore?.Get<int?>("weaponcrafting_level"); }
            set { BackingStore?.Set("weaponcrafting_level", value); }
        }
        /// <summary>Weaponcrafting total xp.</summary>
        public int? WeaponcraftingTotalXp
        {
            get { return BackingStore?.Get<int?>("weaponcrafting_total_xp"); }
            set { BackingStore?.Set("weaponcrafting_total_xp", value); }
        }
        /// <summary>Woodcutting level.</summary>
        public int? WoodcuttingLevel
        {
            get { return BackingStore?.Get<int?>("woodcutting_level"); }
            set { BackingStore?.Set("woodcutting_level", value); }
        }
        /// <summary>Woodcutting total xp.</summary>
        public int? WoodcuttingTotalXp
        {
            get { return BackingStore?.Get<int?>("woodcutting_total_xp"); }
            set { BackingStore?.Set("woodcutting_total_xp", value); }
        }
        /// <summary>
        /// Instantiates a new <see cref="global::ArtifactsMmoDotNet.Api.Generated.Models.CharacterLeaderboardSchema"/> and sets the default values.
        /// </summary>
        public CharacterLeaderboardSchema()
        {
            BackingStore = BackingStoreFactorySingleton.Instance.CreateBackingStore();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::ArtifactsMmoDotNet.Api.Generated.Models.CharacterLeaderboardSchema"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::ArtifactsMmoDotNet.Api.Generated.Models.CharacterLeaderboardSchema CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::ArtifactsMmoDotNet.Api.Generated.Models.CharacterLeaderboardSchema();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "achievements_points", n => { AchievementsPoints = n.GetIntValue(); } },
                { "cooking_level", n => { CookingLevel = n.GetIntValue(); } },
                { "cooking_total_xp", n => { CookingTotalXp = n.GetIntValue(); } },
                { "fishing_level", n => { FishingLevel = n.GetIntValue(); } },
                { "fishing_total_xp", n => { FishingTotalXp = n.GetIntValue(); } },
                { "gearcrafting_level", n => { GearcraftingLevel = n.GetIntValue(); } },
                { "gearcrafting_total_xp", n => { GearcraftingTotalXp = n.GetIntValue(); } },
                { "gold", n => { Gold = n.GetIntValue(); } },
                { "jewelrycrafting_level", n => { JewelrycraftingLevel = n.GetIntValue(); } },
                { "jewelrycrafting_total_xp", n => { JewelrycraftingTotalXp = n.GetIntValue(); } },
                { "level", n => { Level = n.GetIntValue(); } },
                { "mining_level", n => { MiningLevel = n.GetIntValue(); } },
                { "mining_total_xp", n => { MiningTotalXp = n.GetIntValue(); } },
                { "name", n => { Name = n.GetStringValue(); } },
                { "skin", n => { Skin = n.GetStringValue(); } },
                { "total_xp", n => { TotalXp = n.GetIntValue(); } },
                { "weaponcrafting_level", n => { WeaponcraftingLevel = n.GetIntValue(); } },
                { "weaponcrafting_total_xp", n => { WeaponcraftingTotalXp = n.GetIntValue(); } },
                { "woodcutting_level", n => { WoodcuttingLevel = n.GetIntValue(); } },
                { "woodcutting_total_xp", n => { WoodcuttingTotalXp = n.GetIntValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteIntValue("achievements_points", AchievementsPoints);
            writer.WriteIntValue("cooking_level", CookingLevel);
            writer.WriteIntValue("cooking_total_xp", CookingTotalXp);
            writer.WriteIntValue("fishing_level", FishingLevel);
            writer.WriteIntValue("fishing_total_xp", FishingTotalXp);
            writer.WriteIntValue("gearcrafting_level", GearcraftingLevel);
            writer.WriteIntValue("gearcrafting_total_xp", GearcraftingTotalXp);
            writer.WriteIntValue("gold", Gold);
            writer.WriteIntValue("jewelrycrafting_level", JewelrycraftingLevel);
            writer.WriteIntValue("jewelrycrafting_total_xp", JewelrycraftingTotalXp);
            writer.WriteIntValue("level", Level);
            writer.WriteIntValue("mining_level", MiningLevel);
            writer.WriteIntValue("mining_total_xp", MiningTotalXp);
            writer.WriteStringValue("name", Name);
            writer.WriteStringValue("skin", Skin);
            writer.WriteIntValue("total_xp", TotalXp);
            writer.WriteIntValue("weaponcrafting_level", WeaponcraftingLevel);
            writer.WriteIntValue("weaponcrafting_total_xp", WeaponcraftingTotalXp);
            writer.WriteIntValue("woodcutting_level", WoodcuttingLevel);
            writer.WriteIntValue("woodcutting_total_xp", WoodcuttingTotalXp);
        }
    }
}
