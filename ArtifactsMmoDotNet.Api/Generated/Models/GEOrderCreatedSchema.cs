// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions.Store;
using System.Collections.Generic;
using System.IO;
using System;
namespace ArtifactsMmoDotNet.Api.Generated.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class GEOrderCreatedSchema : IBackedModel, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores model information.</summary>
        public IBackingStore BackingStore { get; private set; }
        /// <summary>Item code.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Code
        {
            get { return BackingStore?.Get<string?>("code"); }
            set { BackingStore?.Set("code", value); }
        }
#nullable restore
#else
        public string Code
        {
            get { return BackingStore?.Get<string>("code"); }
            set { BackingStore?.Set("code", value); }
        }
#endif
        /// <summary>Order created at.</summary>
        public DateTimeOffset? CreatedAt
        {
            get { return BackingStore?.Get<DateTimeOffset?>("created_at"); }
            set { BackingStore?.Set("created_at", value); }
        }
        /// <summary>Order id.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Id
        {
            get { return BackingStore?.Get<string?>("id"); }
            set { BackingStore?.Set("id", value); }
        }
#nullable restore
#else
        public string Id
        {
            get { return BackingStore?.Get<string>("id"); }
            set { BackingStore?.Set("id", value); }
        }
#endif
        /// <summary>Item price per unit.</summary>
        public int? Price
        {
            get { return BackingStore?.Get<int?>("price"); }
            set { BackingStore?.Set("price", value); }
        }
        /// <summary>Item quantity.</summary>
        public int? Quantity
        {
            get { return BackingStore?.Get<int?>("quantity"); }
            set { BackingStore?.Set("quantity", value); }
        }
        /// <summary>Order creation tax (5%, minimum 1)</summary>
        public int? Tax
        {
            get { return BackingStore?.Get<int?>("tax"); }
            set { BackingStore?.Set("tax", value); }
        }
        /// <summary>Total price.</summary>
        public int? TotalPrice
        {
            get { return BackingStore?.Get<int?>("total_price"); }
            set { BackingStore?.Set("total_price", value); }
        }
        /// <summary>
        /// Instantiates a new <see cref="global::ArtifactsMmoDotNet.Api.Generated.Models.GEOrderCreatedSchema"/> and sets the default values.
        /// </summary>
        public GEOrderCreatedSchema()
        {
            BackingStore = BackingStoreFactorySingleton.Instance.CreateBackingStore();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::ArtifactsMmoDotNet.Api.Generated.Models.GEOrderCreatedSchema"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::ArtifactsMmoDotNet.Api.Generated.Models.GEOrderCreatedSchema CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::ArtifactsMmoDotNet.Api.Generated.Models.GEOrderCreatedSchema();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "code", n => { Code = n.GetStringValue(); } },
                { "created_at", n => { CreatedAt = n.GetDateTimeOffsetValue(); } },
                { "id", n => { Id = n.GetStringValue(); } },
                { "price", n => { Price = n.GetIntValue(); } },
                { "quantity", n => { Quantity = n.GetIntValue(); } },
                { "tax", n => { Tax = n.GetIntValue(); } },
                { "total_price", n => { TotalPrice = n.GetIntValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("code", Code);
            writer.WriteDateTimeOffsetValue("created_at", CreatedAt);
            writer.WriteStringValue("id", Id);
            writer.WriteIntValue("price", Price);
            writer.WriteIntValue("quantity", Quantity);
            writer.WriteIntValue("tax", Tax);
            writer.WriteIntValue("total_price", TotalPrice);
        }
    }
}
#pragma warning restore CS0618
