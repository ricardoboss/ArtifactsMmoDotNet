// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions.Store;
using System.Collections.Generic;
using System.IO;
using System;
namespace ArtifactsMmoDotNet.Api.Generated.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class BadgeSchema : IBackedModel, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores model information.</summary>
        public IBackingStore BackingStore { get; private set; }
        /// <summary>Code of the badge. This is the badge&apos;s unique identifier (ID).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Code
        {
            get { return BackingStore?.Get<string?>("code"); }
            set { BackingStore?.Set("code", value); }
        }
#nullable restore
#else
        public string Code
        {
            get { return BackingStore?.Get<string>("code"); }
            set { BackingStore?.Set("code", value); }
        }
#endif
        /// <summary>Conditions to get the badge.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::ArtifactsMmoDotNet.Api.Generated.Models.BadgeConditionSchema>? Conditions
        {
            get { return BackingStore?.Get<List<global::ArtifactsMmoDotNet.Api.Generated.Models.BadgeConditionSchema>?>("conditions"); }
            set { BackingStore?.Set("conditions", value); }
        }
#nullable restore
#else
        public List<global::ArtifactsMmoDotNet.Api.Generated.Models.BadgeConditionSchema> Conditions
        {
            get { return BackingStore?.Get<List<global::ArtifactsMmoDotNet.Api.Generated.Models.BadgeConditionSchema>>("conditions"); }
            set { BackingStore?.Set("conditions", value); }
        }
#endif
        /// <summary>Description of the badge.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Description
        {
            get { return BackingStore?.Get<string?>("description"); }
            set { BackingStore?.Set("description", value); }
        }
#nullable restore
#else
        public string Description
        {
            get { return BackingStore?.Get<string>("description"); }
            set { BackingStore?.Set("description", value); }
        }
#endif
        /// <summary>Season of the badge.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::ArtifactsMmoDotNet.Api.Generated.Models.BadgeSchema.BadgeSchema_season? Season
        {
            get { return BackingStore?.Get<global::ArtifactsMmoDotNet.Api.Generated.Models.BadgeSchema.BadgeSchema_season?>("season"); }
            set { BackingStore?.Set("season", value); }
        }
#nullable restore
#else
        public global::ArtifactsMmoDotNet.Api.Generated.Models.BadgeSchema.BadgeSchema_season Season
        {
            get { return BackingStore?.Get<global::ArtifactsMmoDotNet.Api.Generated.Models.BadgeSchema.BadgeSchema_season>("season"); }
            set { BackingStore?.Set("season", value); }
        }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::ArtifactsMmoDotNet.Api.Generated.Models.BadgeSchema"/> and sets the default values.
        /// </summary>
        public BadgeSchema()
        {
            BackingStore = BackingStoreFactorySingleton.Instance.CreateBackingStore();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::ArtifactsMmoDotNet.Api.Generated.Models.BadgeSchema"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::ArtifactsMmoDotNet.Api.Generated.Models.BadgeSchema CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::ArtifactsMmoDotNet.Api.Generated.Models.BadgeSchema();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "code", n => { Code = n.GetStringValue(); } },
                { "conditions", n => { Conditions = n.GetCollectionOfObjectValues<global::ArtifactsMmoDotNet.Api.Generated.Models.BadgeConditionSchema>(global::ArtifactsMmoDotNet.Api.Generated.Models.BadgeConditionSchema.CreateFromDiscriminatorValue)?.AsList(); } },
                { "description", n => { Description = n.GetStringValue(); } },
                { "season", n => { Season = n.GetObjectValue<global::ArtifactsMmoDotNet.Api.Generated.Models.BadgeSchema.BadgeSchema_season>(global::ArtifactsMmoDotNet.Api.Generated.Models.BadgeSchema.BadgeSchema_season.CreateFromDiscriminatorValue); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("code", Code);
            writer.WriteCollectionOfObjectValues<global::ArtifactsMmoDotNet.Api.Generated.Models.BadgeConditionSchema>("conditions", Conditions);
            writer.WriteStringValue("description", Description);
            writer.WriteObjectValue<global::ArtifactsMmoDotNet.Api.Generated.Models.BadgeSchema.BadgeSchema_season>("season", Season);
        }
        /// <summary>
        /// Composed type wrapper for classes <see cref="global::ArtifactsMmoDotNet.Api.Generated.Models.BadgeSchema_seasonMember1"/>, <see cref="int"/>
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class BadgeSchema_season : IBackedModel, IComposedTypeWrapper, IParsable
        {
            /// <summary>Stores model information.</summary>
            public IBackingStore BackingStore { get; private set; }
            /// <summary>Composed type representation for type <see cref="global::ArtifactsMmoDotNet.Api.Generated.Models.BadgeSchema_seasonMember1"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::ArtifactsMmoDotNet.Api.Generated.Models.BadgeSchema_seasonMember1? BadgeSchemaSeasonMember1
            {
                get { return BackingStore?.Get<global::ArtifactsMmoDotNet.Api.Generated.Models.BadgeSchema_seasonMember1?>("BadgeSchema_seasonMember1"); }
                set { BackingStore?.Set("BadgeSchema_seasonMember1", value); }
            }
#nullable restore
#else
            public global::ArtifactsMmoDotNet.Api.Generated.Models.BadgeSchema_seasonMember1 BadgeSchemaSeasonMember1
            {
                get { return BackingStore?.Get<global::ArtifactsMmoDotNet.Api.Generated.Models.BadgeSchema_seasonMember1>("BadgeSchema_seasonMember1"); }
                set { BackingStore?.Set("BadgeSchema_seasonMember1", value); }
            }
#endif
            /// <summary>Composed type representation for type <see cref="int"/></summary>
            public int? Integer
            {
                get { return BackingStore?.Get<int?>("integer"); }
                set { BackingStore?.Set("integer", value); }
            }
            /// <summary>
            /// Instantiates a new <see cref="global::ArtifactsMmoDotNet.Api.Generated.Models.BadgeSchema.BadgeSchema_season"/> and sets the default values.
            /// </summary>
            public BadgeSchema_season()
            {
                BackingStore = BackingStoreFactorySingleton.Instance.CreateBackingStore();
            }
            /// <summary>
            /// Creates a new instance of the appropriate class based on discriminator value
            /// </summary>
            /// <returns>A <see cref="global::ArtifactsMmoDotNet.Api.Generated.Models.BadgeSchema.BadgeSchema_season"/></returns>
            /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
            public static global::ArtifactsMmoDotNet.Api.Generated.Models.BadgeSchema.BadgeSchema_season CreateFromDiscriminatorValue(IParseNode parseNode)
            {
                _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
                var result = new global::ArtifactsMmoDotNet.Api.Generated.Models.BadgeSchema.BadgeSchema_season();
                if(parseNode.GetIntValue() is int integerValue)
                {
                    result.Integer = integerValue;
                }
                else {
                    result.BadgeSchemaSeasonMember1 = new global::ArtifactsMmoDotNet.Api.Generated.Models.BadgeSchema_seasonMember1();
                }
                return result;
            }
            /// <summary>
            /// The deserialization information for the current model
            /// </summary>
            /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
            public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
            {
                if(BadgeSchemaSeasonMember1 != null)
                {
                    return ParseNodeHelper.MergeDeserializersForIntersectionWrapper(BadgeSchemaSeasonMember1);
                }
                return new Dictionary<string, Action<IParseNode>>();
            }
            /// <summary>
            /// Serializes information the current object
            /// </summary>
            /// <param name="writer">Serialization writer to use to serialize this model</param>
            public virtual void Serialize(ISerializationWriter writer)
            {
                _ = writer ?? throw new ArgumentNullException(nameof(writer));
                if(Integer != null)
                {
                    writer.WriteIntValue(null, Integer);
                }
                else {
                    writer.WriteObjectValue<global::ArtifactsMmoDotNet.Api.Generated.Models.BadgeSchema_seasonMember1>(null, BadgeSchemaSeasonMember1);
                }
            }
        }
    }
}
#pragma warning restore CS0618
