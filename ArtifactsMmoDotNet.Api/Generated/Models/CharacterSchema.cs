// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions.Store;
using System.Collections.Generic;
using System.IO;
using System;
namespace ArtifactsMmoDotNet.Api.Generated.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class CharacterSchema : IBackedModel, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Account name.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Account
        {
            get { return BackingStore?.Get<string?>("account"); }
            set { BackingStore?.Set("account", value); }
        }
#nullable restore
#else
        public string Account
        {
            get { return BackingStore?.Get<string>("account"); }
            set { BackingStore?.Set("account", value); }
        }
#endif
        /// <summary>Alchemy level.</summary>
        public int? AlchemyLevel
        {
            get { return BackingStore?.Get<int?>("alchemy_level"); }
            set { BackingStore?.Set("alchemy_level", value); }
        }
        /// <summary>Alchemy XP required to level up the skill.</summary>
        public int? AlchemyMaxXp
        {
            get { return BackingStore?.Get<int?>("alchemy_max_xp"); }
            set { BackingStore?.Set("alchemy_max_xp", value); }
        }
        /// <summary>Alchemy XP.</summary>
        public int? AlchemyXp
        {
            get { return BackingStore?.Get<int?>("alchemy_xp"); }
            set { BackingStore?.Set("alchemy_xp", value); }
        }
        /// <summary>Amulet slot.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? AmuletSlot
        {
            get { return BackingStore?.Get<string?>("amulet_slot"); }
            set { BackingStore?.Set("amulet_slot", value); }
        }
#nullable restore
#else
        public string AmuletSlot
        {
            get { return BackingStore?.Get<string>("amulet_slot"); }
            set { BackingStore?.Set("amulet_slot", value); }
        }
#endif
        /// <summary>Artifact 1 slot.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Artifact1Slot
        {
            get { return BackingStore?.Get<string?>("artifact1_slot"); }
            set { BackingStore?.Set("artifact1_slot", value); }
        }
#nullable restore
#else
        public string Artifact1Slot
        {
            get { return BackingStore?.Get<string>("artifact1_slot"); }
            set { BackingStore?.Set("artifact1_slot", value); }
        }
#endif
        /// <summary>Artifact 2 slot.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Artifact2Slot
        {
            get { return BackingStore?.Get<string?>("artifact2_slot"); }
            set { BackingStore?.Set("artifact2_slot", value); }
        }
#nullable restore
#else
        public string Artifact2Slot
        {
            get { return BackingStore?.Get<string>("artifact2_slot"); }
            set { BackingStore?.Set("artifact2_slot", value); }
        }
#endif
        /// <summary>Artifact 3 slot.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Artifact3Slot
        {
            get { return BackingStore?.Get<string?>("artifact3_slot"); }
            set { BackingStore?.Set("artifact3_slot", value); }
        }
#nullable restore
#else
        public string Artifact3Slot
        {
            get { return BackingStore?.Get<string>("artifact3_slot"); }
            set { BackingStore?.Set("artifact3_slot", value); }
        }
#endif
        /// <summary>Air attack.</summary>
        public int? AttackAir
        {
            get { return BackingStore?.Get<int?>("attack_air"); }
            set { BackingStore?.Set("attack_air", value); }
        }
        /// <summary>Earth attack.</summary>
        public int? AttackEarth
        {
            get { return BackingStore?.Get<int?>("attack_earth"); }
            set { BackingStore?.Set("attack_earth", value); }
        }
        /// <summary>Fire attack.</summary>
        public int? AttackFire
        {
            get { return BackingStore?.Get<int?>("attack_fire"); }
            set { BackingStore?.Set("attack_fire", value); }
        }
        /// <summary>Water attack.</summary>
        public int? AttackWater
        {
            get { return BackingStore?.Get<int?>("attack_water"); }
            set { BackingStore?.Set("attack_water", value); }
        }
        /// <summary>Stores model information.</summary>
        public IBackingStore BackingStore { get; private set; }
        /// <summary>Bag slot.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? BagSlot
        {
            get { return BackingStore?.Get<string?>("bag_slot"); }
            set { BackingStore?.Set("bag_slot", value); }
        }
#nullable restore
#else
        public string BagSlot
        {
            get { return BackingStore?.Get<string>("bag_slot"); }
            set { BackingStore?.Set("bag_slot", value); }
        }
#endif
        /// <summary>Body armor slot.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? BodyArmorSlot
        {
            get { return BackingStore?.Get<string?>("body_armor_slot"); }
            set { BackingStore?.Set("body_armor_slot", value); }
        }
#nullable restore
#else
        public string BodyArmorSlot
        {
            get { return BackingStore?.Get<string>("body_armor_slot"); }
            set { BackingStore?.Set("body_armor_slot", value); }
        }
#endif
        /// <summary>Boots slot.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? BootsSlot
        {
            get { return BackingStore?.Get<string?>("boots_slot"); }
            set { BackingStore?.Set("boots_slot", value); }
        }
#nullable restore
#else
        public string BootsSlot
        {
            get { return BackingStore?.Get<string>("boots_slot"); }
            set { BackingStore?.Set("boots_slot", value); }
        }
#endif
        /// <summary>The current xp level of the Cooking skill.</summary>
        public int? CookingLevel
        {
            get { return BackingStore?.Get<int?>("cooking_level"); }
            set { BackingStore?.Set("cooking_level", value); }
        }
        /// <summary>Cooking XP required to level up the skill.</summary>
        public int? CookingMaxXp
        {
            get { return BackingStore?.Get<int?>("cooking_max_xp"); }
            set { BackingStore?.Set("cooking_max_xp", value); }
        }
        /// <summary>Cooking XP.</summary>
        public int? CookingXp
        {
            get { return BackingStore?.Get<int?>("cooking_xp"); }
            set { BackingStore?.Set("cooking_xp", value); }
        }
        /// <summary>Cooldown in seconds.</summary>
        public int? Cooldown
        {
            get { return BackingStore?.Get<int?>("cooldown"); }
            set { BackingStore?.Set("cooldown", value); }
        }
        /// <summary>Datetime Cooldown expiration.</summary>
        public DateTimeOffset? CooldownExpiration
        {
            get { return BackingStore?.Get<DateTimeOffset?>("cooldown_expiration"); }
            set { BackingStore?.Set("cooldown_expiration", value); }
        }
        /// <summary>% Critical strike. Critical strikes adds 50% extra damage to an attack (1.5x).</summary>
        public int? CriticalStrike
        {
            get { return BackingStore?.Get<int?>("critical_strike"); }
            set { BackingStore?.Set("critical_strike", value); }
        }
        /// <summary>% Damage. Damage increases your attack in all elements.</summary>
        public int? Dmg
        {
            get { return BackingStore?.Get<int?>("dmg"); }
            set { BackingStore?.Set("dmg", value); }
        }
        /// <summary>% Air damage. Damage increases your air attack.</summary>
        public int? DmgAir
        {
            get { return BackingStore?.Get<int?>("dmg_air"); }
            set { BackingStore?.Set("dmg_air", value); }
        }
        /// <summary>% Earth damage. Damage increases your earth attack.</summary>
        public int? DmgEarth
        {
            get { return BackingStore?.Get<int?>("dmg_earth"); }
            set { BackingStore?.Set("dmg_earth", value); }
        }
        /// <summary>% Fire damage. Damage increases your fire attack.</summary>
        public int? DmgFire
        {
            get { return BackingStore?.Get<int?>("dmg_fire"); }
            set { BackingStore?.Set("dmg_fire", value); }
        }
        /// <summary>% Water damage. Damage increases your water attack.</summary>
        public int? DmgWater
        {
            get { return BackingStore?.Get<int?>("dmg_water"); }
            set { BackingStore?.Set("dmg_water", value); }
        }
        /// <summary>Fishing level.</summary>
        public int? FishingLevel
        {
            get { return BackingStore?.Get<int?>("fishing_level"); }
            set { BackingStore?.Set("fishing_level", value); }
        }
        /// <summary>Fishing XP required to level up the skill.</summary>
        public int? FishingMaxXp
        {
            get { return BackingStore?.Get<int?>("fishing_max_xp"); }
            set { BackingStore?.Set("fishing_max_xp", value); }
        }
        /// <summary>The current xp level of the Fishing skill.</summary>
        public int? FishingXp
        {
            get { return BackingStore?.Get<int?>("fishing_xp"); }
            set { BackingStore?.Set("fishing_xp", value); }
        }
        /// <summary>Gearcrafting level.</summary>
        public int? GearcraftingLevel
        {
            get { return BackingStore?.Get<int?>("gearcrafting_level"); }
            set { BackingStore?.Set("gearcrafting_level", value); }
        }
        /// <summary>Gearcrafting XP required to level up the skill.</summary>
        public int? GearcraftingMaxXp
        {
            get { return BackingStore?.Get<int?>("gearcrafting_max_xp"); }
            set { BackingStore?.Set("gearcrafting_max_xp", value); }
        }
        /// <summary>The current xp level of the Gearcrafting skill.</summary>
        public int? GearcraftingXp
        {
            get { return BackingStore?.Get<int?>("gearcrafting_xp"); }
            set { BackingStore?.Set("gearcrafting_xp", value); }
        }
        /// <summary>The numbers of gold on this character.</summary>
        public int? Gold
        {
            get { return BackingStore?.Get<int?>("gold"); }
            set { BackingStore?.Set("gold", value); }
        }
        /// <summary>*Increase speed attack (reduce fight cooldown)</summary>
        public int? Haste
        {
            get { return BackingStore?.Get<int?>("haste"); }
            set { BackingStore?.Set("haste", value); }
        }
        /// <summary>Helmet slot.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? HelmetSlot
        {
            get { return BackingStore?.Get<string?>("helmet_slot"); }
            set { BackingStore?.Set("helmet_slot", value); }
        }
#nullable restore
#else
        public string HelmetSlot
        {
            get { return BackingStore?.Get<string>("helmet_slot"); }
            set { BackingStore?.Set("helmet_slot", value); }
        }
#endif
        /// <summary>Character actual HP.</summary>
        public int? Hp
        {
            get { return BackingStore?.Get<int?>("hp"); }
            set { BackingStore?.Set("hp", value); }
        }
        /// <summary>List of inventory slots.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::ArtifactsMmoDotNet.Api.Generated.Models.InventorySlot>? Inventory
        {
            get { return BackingStore?.Get<List<global::ArtifactsMmoDotNet.Api.Generated.Models.InventorySlot>?>("inventory"); }
            set { BackingStore?.Set("inventory", value); }
        }
#nullable restore
#else
        public List<global::ArtifactsMmoDotNet.Api.Generated.Models.InventorySlot> Inventory
        {
            get { return BackingStore?.Get<List<global::ArtifactsMmoDotNet.Api.Generated.Models.InventorySlot>>("inventory"); }
            set { BackingStore?.Set("inventory", value); }
        }
#endif
        /// <summary>Inventory max items.</summary>
        public int? InventoryMaxItems
        {
            get { return BackingStore?.Get<int?>("inventory_max_items"); }
            set { BackingStore?.Set("inventory_max_items", value); }
        }
        /// <summary>Jewelrycrafting level.</summary>
        public int? JewelrycraftingLevel
        {
            get { return BackingStore?.Get<int?>("jewelrycrafting_level"); }
            set { BackingStore?.Set("jewelrycrafting_level", value); }
        }
        /// <summary>Jewelrycrafting XP required to level up the skill.</summary>
        public int? JewelrycraftingMaxXp
        {
            get { return BackingStore?.Get<int?>("jewelrycrafting_max_xp"); }
            set { BackingStore?.Set("jewelrycrafting_max_xp", value); }
        }
        /// <summary>The current xp level of the Jewelrycrafting skill.</summary>
        public int? JewelrycraftingXp
        {
            get { return BackingStore?.Get<int?>("jewelrycrafting_xp"); }
            set { BackingStore?.Set("jewelrycrafting_xp", value); }
        }
        /// <summary>Leg armor slot.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? LegArmorSlot
        {
            get { return BackingStore?.Get<string?>("leg_armor_slot"); }
            set { BackingStore?.Set("leg_armor_slot", value); }
        }
#nullable restore
#else
        public string LegArmorSlot
        {
            get { return BackingStore?.Get<string>("leg_armor_slot"); }
            set { BackingStore?.Set("leg_armor_slot", value); }
        }
#endif
        /// <summary>Combat level.</summary>
        public int? Level
        {
            get { return BackingStore?.Get<int?>("level"); }
            set { BackingStore?.Set("level", value); }
        }
        /// <summary>Character max HP.</summary>
        public int? MaxHp
        {
            get { return BackingStore?.Get<int?>("max_hp"); }
            set { BackingStore?.Set("max_hp", value); }
        }
        /// <summary>XP required to level up the character.</summary>
        public int? MaxXp
        {
            get { return BackingStore?.Get<int?>("max_xp"); }
            set { BackingStore?.Set("max_xp", value); }
        }
        /// <summary>Mining level.</summary>
        public int? MiningLevel
        {
            get { return BackingStore?.Get<int?>("mining_level"); }
            set { BackingStore?.Set("mining_level", value); }
        }
        /// <summary>Mining XP required to level up the skill.</summary>
        public int? MiningMaxXp
        {
            get { return BackingStore?.Get<int?>("mining_max_xp"); }
            set { BackingStore?.Set("mining_max_xp", value); }
        }
        /// <summary>The current xp level of the Mining skill.</summary>
        public int? MiningXp
        {
            get { return BackingStore?.Get<int?>("mining_xp"); }
            set { BackingStore?.Set("mining_xp", value); }
        }
        /// <summary>Name of the character.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Name
        {
            get { return BackingStore?.Get<string?>("name"); }
            set { BackingStore?.Set("name", value); }
        }
#nullable restore
#else
        public string Name
        {
            get { return BackingStore?.Get<string>("name"); }
            set { BackingStore?.Set("name", value); }
        }
#endif
        /// <summary>Prospecting increases the chances of getting drops from fights and skills (1% extra per 10 PP).</summary>
        public int? Prospecting
        {
            get { return BackingStore?.Get<int?>("prospecting"); }
            set { BackingStore?.Set("prospecting", value); }
        }
        /// <summary>% Air resistance. Reduces air attack.</summary>
        public int? ResAir
        {
            get { return BackingStore?.Get<int?>("res_air"); }
            set { BackingStore?.Set("res_air", value); }
        }
        /// <summary>% Earth resistance. Reduces earth attack.</summary>
        public int? ResEarth
        {
            get { return BackingStore?.Get<int?>("res_earth"); }
            set { BackingStore?.Set("res_earth", value); }
        }
        /// <summary>% Fire resistance. Reduces fire attack.</summary>
        public int? ResFire
        {
            get { return BackingStore?.Get<int?>("res_fire"); }
            set { BackingStore?.Set("res_fire", value); }
        }
        /// <summary>% Water resistance. Reduces water attack.</summary>
        public int? ResWater
        {
            get { return BackingStore?.Get<int?>("res_water"); }
            set { BackingStore?.Set("res_water", value); }
        }
        /// <summary>Ring 1 slot.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Ring1Slot
        {
            get { return BackingStore?.Get<string?>("ring1_slot"); }
            set { BackingStore?.Set("ring1_slot", value); }
        }
#nullable restore
#else
        public string Ring1Slot
        {
            get { return BackingStore?.Get<string>("ring1_slot"); }
            set { BackingStore?.Set("ring1_slot", value); }
        }
#endif
        /// <summary>Ring 2 slot.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Ring2Slot
        {
            get { return BackingStore?.Get<string?>("ring2_slot"); }
            set { BackingStore?.Set("ring2_slot", value); }
        }
#nullable restore
#else
        public string Ring2Slot
        {
            get { return BackingStore?.Get<string>("ring2_slot"); }
            set { BackingStore?.Set("ring2_slot", value); }
        }
#endif
        /// <summary>Rune slot.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? RuneSlot
        {
            get { return BackingStore?.Get<string?>("rune_slot"); }
            set { BackingStore?.Set("rune_slot", value); }
        }
#nullable restore
#else
        public string RuneSlot
        {
            get { return BackingStore?.Get<string>("rune_slot"); }
            set { BackingStore?.Set("rune_slot", value); }
        }
#endif
        /// <summary>Shield slot.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ShieldSlot
        {
            get { return BackingStore?.Get<string?>("shield_slot"); }
            set { BackingStore?.Set("shield_slot", value); }
        }
#nullable restore
#else
        public string ShieldSlot
        {
            get { return BackingStore?.Get<string>("shield_slot"); }
            set { BackingStore?.Set("shield_slot", value); }
        }
#endif
        /// <summary>Character skin code.</summary>
        public global::ArtifactsMmoDotNet.Api.Generated.Models.CharacterSkin? Skin
        {
            get { return BackingStore?.Get<global::ArtifactsMmoDotNet.Api.Generated.Models.CharacterSkin?>("skin"); }
            set { BackingStore?.Set("skin", value); }
        }
        /// <summary>*Not available, on the roadmap. Character movement speed.</summary>
        public int? Speed
        {
            get { return BackingStore?.Get<int?>("speed"); }
            set { BackingStore?.Set("speed", value); }
        }
        /// <summary>Task in progress.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Task
        {
            get { return BackingStore?.Get<string?>("task"); }
            set { BackingStore?.Set("task", value); }
        }
#nullable restore
#else
        public string Task
        {
            get { return BackingStore?.Get<string>("task"); }
            set { BackingStore?.Set("task", value); }
        }
#endif
        /// <summary>Task progression.</summary>
        public int? TaskProgress
        {
            get { return BackingStore?.Get<int?>("task_progress"); }
            set { BackingStore?.Set("task_progress", value); }
        }
        /// <summary>Task total objective.</summary>
        public int? TaskTotal
        {
            get { return BackingStore?.Get<int?>("task_total"); }
            set { BackingStore?.Set("task_total", value); }
        }
        /// <summary>Task type.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? TaskType
        {
            get { return BackingStore?.Get<string?>("task_type"); }
            set { BackingStore?.Set("task_type", value); }
        }
#nullable restore
#else
        public string TaskType
        {
            get { return BackingStore?.Get<string>("task_type"); }
            set { BackingStore?.Set("task_type", value); }
        }
#endif
        /// <summary>Utility 1 slot.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Utility1Slot
        {
            get { return BackingStore?.Get<string?>("utility1_slot"); }
            set { BackingStore?.Set("utility1_slot", value); }
        }
#nullable restore
#else
        public string Utility1Slot
        {
            get { return BackingStore?.Get<string>("utility1_slot"); }
            set { BackingStore?.Set("utility1_slot", value); }
        }
#endif
        /// <summary>Utility 1 quantity.</summary>
        public int? Utility1SlotQuantity
        {
            get { return BackingStore?.Get<int?>("utility1_slot_quantity"); }
            set { BackingStore?.Set("utility1_slot_quantity", value); }
        }
        /// <summary>Utility 2 slot.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Utility2Slot
        {
            get { return BackingStore?.Get<string?>("utility2_slot"); }
            set { BackingStore?.Set("utility2_slot", value); }
        }
#nullable restore
#else
        public string Utility2Slot
        {
            get { return BackingStore?.Get<string>("utility2_slot"); }
            set { BackingStore?.Set("utility2_slot", value); }
        }
#endif
        /// <summary>Utility 2 quantity.</summary>
        public int? Utility2SlotQuantity
        {
            get { return BackingStore?.Get<int?>("utility2_slot_quantity"); }
            set { BackingStore?.Set("utility2_slot_quantity", value); }
        }
        /// <summary>Weaponcrafting level.</summary>
        public int? WeaponcraftingLevel
        {
            get { return BackingStore?.Get<int?>("weaponcrafting_level"); }
            set { BackingStore?.Set("weaponcrafting_level", value); }
        }
        /// <summary>Weaponcrafting XP required to level up the skill.</summary>
        public int? WeaponcraftingMaxXp
        {
            get { return BackingStore?.Get<int?>("weaponcrafting_max_xp"); }
            set { BackingStore?.Set("weaponcrafting_max_xp", value); }
        }
        /// <summary>The current xp level of the Weaponcrafting skill.</summary>
        public int? WeaponcraftingXp
        {
            get { return BackingStore?.Get<int?>("weaponcrafting_xp"); }
            set { BackingStore?.Set("weaponcrafting_xp", value); }
        }
        /// <summary>Weapon slot.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? WeaponSlot
        {
            get { return BackingStore?.Get<string?>("weapon_slot"); }
            set { BackingStore?.Set("weapon_slot", value); }
        }
#nullable restore
#else
        public string WeaponSlot
        {
            get { return BackingStore?.Get<string>("weapon_slot"); }
            set { BackingStore?.Set("weapon_slot", value); }
        }
#endif
        /// <summary>Wisdom increases the amount of XP gained from fights and skills (1% extra per 10 wisdom).</summary>
        public int? Wisdom
        {
            get { return BackingStore?.Get<int?>("wisdom"); }
            set { BackingStore?.Set("wisdom", value); }
        }
        /// <summary>Woodcutting level.</summary>
        public int? WoodcuttingLevel
        {
            get { return BackingStore?.Get<int?>("woodcutting_level"); }
            set { BackingStore?.Set("woodcutting_level", value); }
        }
        /// <summary>Woodcutting XP required to level up the skill.</summary>
        public int? WoodcuttingMaxXp
        {
            get { return BackingStore?.Get<int?>("woodcutting_max_xp"); }
            set { BackingStore?.Set("woodcutting_max_xp", value); }
        }
        /// <summary>The current xp level of the Woodcutting skill.</summary>
        public int? WoodcuttingXp
        {
            get { return BackingStore?.Get<int?>("woodcutting_xp"); }
            set { BackingStore?.Set("woodcutting_xp", value); }
        }
        /// <summary>Character x coordinate.</summary>
        public int? X
        {
            get { return BackingStore?.Get<int?>("x"); }
            set { BackingStore?.Set("x", value); }
        }
        /// <summary>The current xp level of the combat level.</summary>
        public int? Xp
        {
            get { return BackingStore?.Get<int?>("xp"); }
            set { BackingStore?.Set("xp", value); }
        }
        /// <summary>Character y coordinate.</summary>
        public int? Y
        {
            get { return BackingStore?.Get<int?>("y"); }
            set { BackingStore?.Set("y", value); }
        }
        /// <summary>
        /// Instantiates a new <see cref="global::ArtifactsMmoDotNet.Api.Generated.Models.CharacterSchema"/> and sets the default values.
        /// </summary>
        public CharacterSchema()
        {
            BackingStore = BackingStoreFactorySingleton.Instance.CreateBackingStore();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::ArtifactsMmoDotNet.Api.Generated.Models.CharacterSchema"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::ArtifactsMmoDotNet.Api.Generated.Models.CharacterSchema CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::ArtifactsMmoDotNet.Api.Generated.Models.CharacterSchema();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "account", n => { Account = n.GetStringValue(); } },
                { "alchemy_level", n => { AlchemyLevel = n.GetIntValue(); } },
                { "alchemy_max_xp", n => { AlchemyMaxXp = n.GetIntValue(); } },
                { "alchemy_xp", n => { AlchemyXp = n.GetIntValue(); } },
                { "amulet_slot", n => { AmuletSlot = n.GetStringValue(); } },
                { "artifact1_slot", n => { Artifact1Slot = n.GetStringValue(); } },
                { "artifact2_slot", n => { Artifact2Slot = n.GetStringValue(); } },
                { "artifact3_slot", n => { Artifact3Slot = n.GetStringValue(); } },
                { "attack_air", n => { AttackAir = n.GetIntValue(); } },
                { "attack_earth", n => { AttackEarth = n.GetIntValue(); } },
                { "attack_fire", n => { AttackFire = n.GetIntValue(); } },
                { "attack_water", n => { AttackWater = n.GetIntValue(); } },
                { "bag_slot", n => { BagSlot = n.GetStringValue(); } },
                { "body_armor_slot", n => { BodyArmorSlot = n.GetStringValue(); } },
                { "boots_slot", n => { BootsSlot = n.GetStringValue(); } },
                { "cooking_level", n => { CookingLevel = n.GetIntValue(); } },
                { "cooking_max_xp", n => { CookingMaxXp = n.GetIntValue(); } },
                { "cooking_xp", n => { CookingXp = n.GetIntValue(); } },
                { "cooldown", n => { Cooldown = n.GetIntValue(); } },
                { "cooldown_expiration", n => { CooldownExpiration = n.GetDateTimeOffsetValue(); } },
                { "critical_strike", n => { CriticalStrike = n.GetIntValue(); } },
                { "dmg", n => { Dmg = n.GetIntValue(); } },
                { "dmg_air", n => { DmgAir = n.GetIntValue(); } },
                { "dmg_earth", n => { DmgEarth = n.GetIntValue(); } },
                { "dmg_fire", n => { DmgFire = n.GetIntValue(); } },
                { "dmg_water", n => { DmgWater = n.GetIntValue(); } },
                { "fishing_level", n => { FishingLevel = n.GetIntValue(); } },
                { "fishing_max_xp", n => { FishingMaxXp = n.GetIntValue(); } },
                { "fishing_xp", n => { FishingXp = n.GetIntValue(); } },
                { "gearcrafting_level", n => { GearcraftingLevel = n.GetIntValue(); } },
                { "gearcrafting_max_xp", n => { GearcraftingMaxXp = n.GetIntValue(); } },
                { "gearcrafting_xp", n => { GearcraftingXp = n.GetIntValue(); } },
                { "gold", n => { Gold = n.GetIntValue(); } },
                { "haste", n => { Haste = n.GetIntValue(); } },
                { "helmet_slot", n => { HelmetSlot = n.GetStringValue(); } },
                { "hp", n => { Hp = n.GetIntValue(); } },
                { "inventory", n => { Inventory = n.GetCollectionOfObjectValues<global::ArtifactsMmoDotNet.Api.Generated.Models.InventorySlot>(global::ArtifactsMmoDotNet.Api.Generated.Models.InventorySlot.CreateFromDiscriminatorValue)?.AsList(); } },
                { "inventory_max_items", n => { InventoryMaxItems = n.GetIntValue(); } },
                { "jewelrycrafting_level", n => { JewelrycraftingLevel = n.GetIntValue(); } },
                { "jewelrycrafting_max_xp", n => { JewelrycraftingMaxXp = n.GetIntValue(); } },
                { "jewelrycrafting_xp", n => { JewelrycraftingXp = n.GetIntValue(); } },
                { "leg_armor_slot", n => { LegArmorSlot = n.GetStringValue(); } },
                { "level", n => { Level = n.GetIntValue(); } },
                { "max_hp", n => { MaxHp = n.GetIntValue(); } },
                { "max_xp", n => { MaxXp = n.GetIntValue(); } },
                { "mining_level", n => { MiningLevel = n.GetIntValue(); } },
                { "mining_max_xp", n => { MiningMaxXp = n.GetIntValue(); } },
                { "mining_xp", n => { MiningXp = n.GetIntValue(); } },
                { "name", n => { Name = n.GetStringValue(); } },
                { "prospecting", n => { Prospecting = n.GetIntValue(); } },
                { "res_air", n => { ResAir = n.GetIntValue(); } },
                { "res_earth", n => { ResEarth = n.GetIntValue(); } },
                { "res_fire", n => { ResFire = n.GetIntValue(); } },
                { "res_water", n => { ResWater = n.GetIntValue(); } },
                { "ring1_slot", n => { Ring1Slot = n.GetStringValue(); } },
                { "ring2_slot", n => { Ring2Slot = n.GetStringValue(); } },
                { "rune_slot", n => { RuneSlot = n.GetStringValue(); } },
                { "shield_slot", n => { ShieldSlot = n.GetStringValue(); } },
                { "skin", n => { Skin = n.GetEnumValue<global::ArtifactsMmoDotNet.Api.Generated.Models.CharacterSkin>(); } },
                { "speed", n => { Speed = n.GetIntValue(); } },
                { "task", n => { Task = n.GetStringValue(); } },
                { "task_progress", n => { TaskProgress = n.GetIntValue(); } },
                { "task_total", n => { TaskTotal = n.GetIntValue(); } },
                { "task_type", n => { TaskType = n.GetStringValue(); } },
                { "utility1_slot", n => { Utility1Slot = n.GetStringValue(); } },
                { "utility1_slot_quantity", n => { Utility1SlotQuantity = n.GetIntValue(); } },
                { "utility2_slot", n => { Utility2Slot = n.GetStringValue(); } },
                { "utility2_slot_quantity", n => { Utility2SlotQuantity = n.GetIntValue(); } },
                { "weapon_slot", n => { WeaponSlot = n.GetStringValue(); } },
                { "weaponcrafting_level", n => { WeaponcraftingLevel = n.GetIntValue(); } },
                { "weaponcrafting_max_xp", n => { WeaponcraftingMaxXp = n.GetIntValue(); } },
                { "weaponcrafting_xp", n => { WeaponcraftingXp = n.GetIntValue(); } },
                { "wisdom", n => { Wisdom = n.GetIntValue(); } },
                { "woodcutting_level", n => { WoodcuttingLevel = n.GetIntValue(); } },
                { "woodcutting_max_xp", n => { WoodcuttingMaxXp = n.GetIntValue(); } },
                { "woodcutting_xp", n => { WoodcuttingXp = n.GetIntValue(); } },
                { "x", n => { X = n.GetIntValue(); } },
                { "xp", n => { Xp = n.GetIntValue(); } },
                { "y", n => { Y = n.GetIntValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("account", Account);
            writer.WriteIntValue("alchemy_level", AlchemyLevel);
            writer.WriteIntValue("alchemy_max_xp", AlchemyMaxXp);
            writer.WriteIntValue("alchemy_xp", AlchemyXp);
            writer.WriteStringValue("amulet_slot", AmuletSlot);
            writer.WriteStringValue("artifact1_slot", Artifact1Slot);
            writer.WriteStringValue("artifact2_slot", Artifact2Slot);
            writer.WriteStringValue("artifact3_slot", Artifact3Slot);
            writer.WriteIntValue("attack_air", AttackAir);
            writer.WriteIntValue("attack_earth", AttackEarth);
            writer.WriteIntValue("attack_fire", AttackFire);
            writer.WriteIntValue("attack_water", AttackWater);
            writer.WriteStringValue("bag_slot", BagSlot);
            writer.WriteStringValue("body_armor_slot", BodyArmorSlot);
            writer.WriteStringValue("boots_slot", BootsSlot);
            writer.WriteIntValue("cooking_level", CookingLevel);
            writer.WriteIntValue("cooking_max_xp", CookingMaxXp);
            writer.WriteIntValue("cooking_xp", CookingXp);
            writer.WriteIntValue("cooldown", Cooldown);
            writer.WriteDateTimeOffsetValue("cooldown_expiration", CooldownExpiration);
            writer.WriteIntValue("critical_strike", CriticalStrike);
            writer.WriteIntValue("dmg", Dmg);
            writer.WriteIntValue("dmg_air", DmgAir);
            writer.WriteIntValue("dmg_earth", DmgEarth);
            writer.WriteIntValue("dmg_fire", DmgFire);
            writer.WriteIntValue("dmg_water", DmgWater);
            writer.WriteIntValue("fishing_level", FishingLevel);
            writer.WriteIntValue("fishing_max_xp", FishingMaxXp);
            writer.WriteIntValue("fishing_xp", FishingXp);
            writer.WriteIntValue("gearcrafting_level", GearcraftingLevel);
            writer.WriteIntValue("gearcrafting_max_xp", GearcraftingMaxXp);
            writer.WriteIntValue("gearcrafting_xp", GearcraftingXp);
            writer.WriteIntValue("gold", Gold);
            writer.WriteIntValue("haste", Haste);
            writer.WriteStringValue("helmet_slot", HelmetSlot);
            writer.WriteIntValue("hp", Hp);
            writer.WriteCollectionOfObjectValues<global::ArtifactsMmoDotNet.Api.Generated.Models.InventorySlot>("inventory", Inventory);
            writer.WriteIntValue("inventory_max_items", InventoryMaxItems);
            writer.WriteIntValue("jewelrycrafting_level", JewelrycraftingLevel);
            writer.WriteIntValue("jewelrycrafting_max_xp", JewelrycraftingMaxXp);
            writer.WriteIntValue("jewelrycrafting_xp", JewelrycraftingXp);
            writer.WriteStringValue("leg_armor_slot", LegArmorSlot);
            writer.WriteIntValue("level", Level);
            writer.WriteIntValue("max_hp", MaxHp);
            writer.WriteIntValue("max_xp", MaxXp);
            writer.WriteIntValue("mining_level", MiningLevel);
            writer.WriteIntValue("mining_max_xp", MiningMaxXp);
            writer.WriteIntValue("mining_xp", MiningXp);
            writer.WriteStringValue("name", Name);
            writer.WriteIntValue("prospecting", Prospecting);
            writer.WriteIntValue("res_air", ResAir);
            writer.WriteIntValue("res_earth", ResEarth);
            writer.WriteIntValue("res_fire", ResFire);
            writer.WriteIntValue("res_water", ResWater);
            writer.WriteStringValue("ring1_slot", Ring1Slot);
            writer.WriteStringValue("ring2_slot", Ring2Slot);
            writer.WriteStringValue("rune_slot", RuneSlot);
            writer.WriteStringValue("shield_slot", ShieldSlot);
            writer.WriteEnumValue<global::ArtifactsMmoDotNet.Api.Generated.Models.CharacterSkin>("skin", Skin);
            writer.WriteIntValue("speed", Speed);
            writer.WriteStringValue("task", Task);
            writer.WriteIntValue("task_progress", TaskProgress);
            writer.WriteIntValue("task_total", TaskTotal);
            writer.WriteStringValue("task_type", TaskType);
            writer.WriteStringValue("utility1_slot", Utility1Slot);
            writer.WriteIntValue("utility1_slot_quantity", Utility1SlotQuantity);
            writer.WriteStringValue("utility2_slot", Utility2Slot);
            writer.WriteIntValue("utility2_slot_quantity", Utility2SlotQuantity);
            writer.WriteIntValue("weaponcrafting_level", WeaponcraftingLevel);
            writer.WriteIntValue("weaponcrafting_max_xp", WeaponcraftingMaxXp);
            writer.WriteIntValue("weaponcrafting_xp", WeaponcraftingXp);
            writer.WriteStringValue("weapon_slot", WeaponSlot);
            writer.WriteIntValue("wisdom", Wisdom);
            writer.WriteIntValue("woodcutting_level", WoodcuttingLevel);
            writer.WriteIntValue("woodcutting_max_xp", WoodcuttingMaxXp);
            writer.WriteIntValue("woodcutting_xp", WoodcuttingXp);
            writer.WriteIntValue("x", X);
            writer.WriteIntValue("xp", Xp);
            writer.WriteIntValue("y", Y);
        }
    }
}
#pragma warning restore CS0618
