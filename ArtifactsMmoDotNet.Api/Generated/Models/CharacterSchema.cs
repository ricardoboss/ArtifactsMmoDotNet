// <auto-generated/>
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions.Store;
using System.Collections.Generic;
using System.IO;
using System;
namespace ArtifactsMmoDotNet.Api.Generated.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.16.0")]
    #pragma warning disable CS1591
    public partial class CharacterSchema : IBackedModel, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Amulet slot.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? AmuletSlot
        {
            get { return BackingStore?.Get<string?>("amulet_slot"); }
            set { BackingStore?.Set("amulet_slot", value); }
        }
#nullable restore
#else
        public string AmuletSlot
        {
            get { return BackingStore?.Get<string>("amulet_slot"); }
            set { BackingStore?.Set("amulet_slot", value); }
        }
#endif
        /// <summary>Artifact 1 slot.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Artifact1Slot
        {
            get { return BackingStore?.Get<string?>("artifact1_slot"); }
            set { BackingStore?.Set("artifact1_slot", value); }
        }
#nullable restore
#else
        public string Artifact1Slot
        {
            get { return BackingStore?.Get<string>("artifact1_slot"); }
            set { BackingStore?.Set("artifact1_slot", value); }
        }
#endif
        /// <summary>Artifact 2 slot.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Artifact2Slot
        {
            get { return BackingStore?.Get<string?>("artifact2_slot"); }
            set { BackingStore?.Set("artifact2_slot", value); }
        }
#nullable restore
#else
        public string Artifact2Slot
        {
            get { return BackingStore?.Get<string>("artifact2_slot"); }
            set { BackingStore?.Set("artifact2_slot", value); }
        }
#endif
        /// <summary>Artifact 3 slot.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Artifact3Slot
        {
            get { return BackingStore?.Get<string?>("artifact3_slot"); }
            set { BackingStore?.Set("artifact3_slot", value); }
        }
#nullable restore
#else
        public string Artifact3Slot
        {
            get { return BackingStore?.Get<string>("artifact3_slot"); }
            set { BackingStore?.Set("artifact3_slot", value); }
        }
#endif
        /// <summary>Air attack.</summary>
        public int? AttackAir
        {
            get { return BackingStore?.Get<int?>("attack_air"); }
            set { BackingStore?.Set("attack_air", value); }
        }
        /// <summary>Earth attack.</summary>
        public int? AttackEarth
        {
            get { return BackingStore?.Get<int?>("attack_earth"); }
            set { BackingStore?.Set("attack_earth", value); }
        }
        /// <summary>Fire attack.</summary>
        public int? AttackFire
        {
            get { return BackingStore?.Get<int?>("attack_fire"); }
            set { BackingStore?.Set("attack_fire", value); }
        }
        /// <summary>Water attack.</summary>
        public int? AttackWater
        {
            get { return BackingStore?.Get<int?>("attack_water"); }
            set { BackingStore?.Set("attack_water", value); }
        }
        /// <summary>Stores model information.</summary>
        public IBackingStore BackingStore { get; private set; }
        /// <summary>Body armor slot.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? BodyArmorSlot
        {
            get { return BackingStore?.Get<string?>("body_armor_slot"); }
            set { BackingStore?.Set("body_armor_slot", value); }
        }
#nullable restore
#else
        public string BodyArmorSlot
        {
            get { return BackingStore?.Get<string>("body_armor_slot"); }
            set { BackingStore?.Set("body_armor_slot", value); }
        }
#endif
        /// <summary>Boots slot.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? BootsSlot
        {
            get { return BackingStore?.Get<string?>("boots_slot"); }
            set { BackingStore?.Set("boots_slot", value); }
        }
#nullable restore
#else
        public string BootsSlot
        {
            get { return BackingStore?.Get<string>("boots_slot"); }
            set { BackingStore?.Set("boots_slot", value); }
        }
#endif
        /// <summary>Consumable 1 slot.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Consumable1Slot
        {
            get { return BackingStore?.Get<string?>("consumable1_slot"); }
            set { BackingStore?.Set("consumable1_slot", value); }
        }
#nullable restore
#else
        public string Consumable1Slot
        {
            get { return BackingStore?.Get<string>("consumable1_slot"); }
            set { BackingStore?.Set("consumable1_slot", value); }
        }
#endif
        /// <summary>Consumable 1 quantity.</summary>
        public int? Consumable1SlotQuantity
        {
            get { return BackingStore?.Get<int?>("consumable1_slot_quantity"); }
            set { BackingStore?.Set("consumable1_slot_quantity", value); }
        }
        /// <summary>Consumable 2 slot.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Consumable2Slot
        {
            get { return BackingStore?.Get<string?>("consumable2_slot"); }
            set { BackingStore?.Set("consumable2_slot", value); }
        }
#nullable restore
#else
        public string Consumable2Slot
        {
            get { return BackingStore?.Get<string>("consumable2_slot"); }
            set { BackingStore?.Set("consumable2_slot", value); }
        }
#endif
        /// <summary>Consumable 2 quantity.</summary>
        public int? Consumable2SlotQuantity
        {
            get { return BackingStore?.Get<int?>("consumable2_slot_quantity"); }
            set { BackingStore?.Set("consumable2_slot_quantity", value); }
        }
        /// <summary>The current xp level of the Cooking skill.</summary>
        public int? CookingLevel
        {
            get { return BackingStore?.Get<int?>("cooking_level"); }
            set { BackingStore?.Set("cooking_level", value); }
        }
        /// <summary>Cooking XP required to level up the skill.</summary>
        public int? CookingMaxXp
        {
            get { return BackingStore?.Get<int?>("cooking_max_xp"); }
            set { BackingStore?.Set("cooking_max_xp", value); }
        }
        /// <summary>Cooking XP.</summary>
        public int? CookingXp
        {
            get { return BackingStore?.Get<int?>("cooking_xp"); }
            set { BackingStore?.Set("cooking_xp", value); }
        }
        /// <summary>Cooldown in seconds.</summary>
        public int? Cooldown
        {
            get { return BackingStore?.Get<int?>("cooldown"); }
            set { BackingStore?.Set("cooldown", value); }
        }
        /// <summary>Datetime Cooldown expiration.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::ArtifactsMmoDotNet.Api.Generated.Models.CharacterSchema.CharacterSchema_cooldown_expiration? CooldownExpiration
        {
            get { return BackingStore?.Get<global::ArtifactsMmoDotNet.Api.Generated.Models.CharacterSchema.CharacterSchema_cooldown_expiration?>("cooldown_expiration"); }
            set { BackingStore?.Set("cooldown_expiration", value); }
        }
#nullable restore
#else
        public global::ArtifactsMmoDotNet.Api.Generated.Models.CharacterSchema.CharacterSchema_cooldown_expiration CooldownExpiration
        {
            get { return BackingStore?.Get<global::ArtifactsMmoDotNet.Api.Generated.Models.CharacterSchema.CharacterSchema_cooldown_expiration>("cooldown_expiration"); }
            set { BackingStore?.Set("cooldown_expiration", value); }
        }
#endif
        /// <summary>*Not available, on the roadmap. Character Critical   Strike. Critical strikes increase the attack&apos;s damage.</summary>
        public int? CriticalStrike
        {
            get { return BackingStore?.Get<int?>("critical_strike"); }
            set { BackingStore?.Set("critical_strike", value); }
        }
        /// <summary>% Air damage.</summary>
        public int? DmgAir
        {
            get { return BackingStore?.Get<int?>("dmg_air"); }
            set { BackingStore?.Set("dmg_air", value); }
        }
        /// <summary>% Earth damage.</summary>
        public int? DmgEarth
        {
            get { return BackingStore?.Get<int?>("dmg_earth"); }
            set { BackingStore?.Set("dmg_earth", value); }
        }
        /// <summary>% Fire damage.</summary>
        public int? DmgFire
        {
            get { return BackingStore?.Get<int?>("dmg_fire"); }
            set { BackingStore?.Set("dmg_fire", value); }
        }
        /// <summary>% Water damage.</summary>
        public int? DmgWater
        {
            get { return BackingStore?.Get<int?>("dmg_water"); }
            set { BackingStore?.Set("dmg_water", value); }
        }
        /// <summary>Fishing level.</summary>
        public int? FishingLevel
        {
            get { return BackingStore?.Get<int?>("fishing_level"); }
            set { BackingStore?.Set("fishing_level", value); }
        }
        /// <summary>Fishing XP required to level up the skill.</summary>
        public int? FishingMaxXp
        {
            get { return BackingStore?.Get<int?>("fishing_max_xp"); }
            set { BackingStore?.Set("fishing_max_xp", value); }
        }
        /// <summary>The current xp level of the Fishing skill.</summary>
        public int? FishingXp
        {
            get { return BackingStore?.Get<int?>("fishing_xp"); }
            set { BackingStore?.Set("fishing_xp", value); }
        }
        /// <summary>Gearcrafting level.</summary>
        public int? GearcraftingLevel
        {
            get { return BackingStore?.Get<int?>("gearcrafting_level"); }
            set { BackingStore?.Set("gearcrafting_level", value); }
        }
        /// <summary>Gearcrafting XP required to level up the skill.</summary>
        public int? GearcraftingMaxXp
        {
            get { return BackingStore?.Get<int?>("gearcrafting_max_xp"); }
            set { BackingStore?.Set("gearcrafting_max_xp", value); }
        }
        /// <summary>The current xp level of the Gearcrafting skill.</summary>
        public int? GearcraftingXp
        {
            get { return BackingStore?.Get<int?>("gearcrafting_xp"); }
            set { BackingStore?.Set("gearcrafting_xp", value); }
        }
        /// <summary>The numbers of golds on this character.</summary>
        public int? Gold
        {
            get { return BackingStore?.Get<int?>("gold"); }
            set { BackingStore?.Set("gold", value); }
        }
        /// <summary>*Character Haste. Increase speed attack (reduce fight cooldown)</summary>
        public int? Haste
        {
            get { return BackingStore?.Get<int?>("haste"); }
            set { BackingStore?.Set("haste", value); }
        }
        /// <summary>Helmet slot.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? HelmetSlot
        {
            get { return BackingStore?.Get<string?>("helmet_slot"); }
            set { BackingStore?.Set("helmet_slot", value); }
        }
#nullable restore
#else
        public string HelmetSlot
        {
            get { return BackingStore?.Get<string>("helmet_slot"); }
            set { BackingStore?.Set("helmet_slot", value); }
        }
#endif
        /// <summary>Character HP.</summary>
        public int? Hp
        {
            get { return BackingStore?.Get<int?>("hp"); }
            set { BackingStore?.Set("hp", value); }
        }
        /// <summary>List of inventory slots.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::ArtifactsMmoDotNet.Api.Generated.Models.InventorySlot>? Inventory
        {
            get { return BackingStore?.Get<List<global::ArtifactsMmoDotNet.Api.Generated.Models.InventorySlot>?>("inventory"); }
            set { BackingStore?.Set("inventory", value); }
        }
#nullable restore
#else
        public List<global::ArtifactsMmoDotNet.Api.Generated.Models.InventorySlot> Inventory
        {
            get { return BackingStore?.Get<List<global::ArtifactsMmoDotNet.Api.Generated.Models.InventorySlot>>("inventory"); }
            set { BackingStore?.Set("inventory", value); }
        }
#endif
        /// <summary>Inventory max items.</summary>
        public int? InventoryMaxItems
        {
            get { return BackingStore?.Get<int?>("inventory_max_items"); }
            set { BackingStore?.Set("inventory_max_items", value); }
        }
        /// <summary>Deprecated** Inventory slot 1.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? InventorySlot1
        {
            get { return BackingStore?.Get<string?>("inventory_slot1"); }
            set { BackingStore?.Set("inventory_slot1", value); }
        }
#nullable restore
#else
        public string InventorySlot1
        {
            get { return BackingStore?.Get<string>("inventory_slot1"); }
            set { BackingStore?.Set("inventory_slot1", value); }
        }
#endif
        /// <summary>Deprecated** Inventory slot 10.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? InventorySlot10
        {
            get { return BackingStore?.Get<string?>("inventory_slot10"); }
            set { BackingStore?.Set("inventory_slot10", value); }
        }
#nullable restore
#else
        public string InventorySlot10
        {
            get { return BackingStore?.Get<string>("inventory_slot10"); }
            set { BackingStore?.Set("inventory_slot10", value); }
        }
#endif
        /// <summary>Deprecated** Inventory 10 quantity.</summary>
        public int? InventorySlot10Quantity
        {
            get { return BackingStore?.Get<int?>("inventory_slot10_quantity"); }
            set { BackingStore?.Set("inventory_slot10_quantity", value); }
        }
        /// <summary>Deprecated** Inventory slot 11.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? InventorySlot11
        {
            get { return BackingStore?.Get<string?>("inventory_slot11"); }
            set { BackingStore?.Set("inventory_slot11", value); }
        }
#nullable restore
#else
        public string InventorySlot11
        {
            get { return BackingStore?.Get<string>("inventory_slot11"); }
            set { BackingStore?.Set("inventory_slot11", value); }
        }
#endif
        /// <summary>Deprecated** Inventory 11 quantity.</summary>
        public int? InventorySlot11Quantity
        {
            get { return BackingStore?.Get<int?>("inventory_slot11_quantity"); }
            set { BackingStore?.Set("inventory_slot11_quantity", value); }
        }
        /// <summary>Deprecated** nventory slot 12.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? InventorySlot12
        {
            get { return BackingStore?.Get<string?>("inventory_slot12"); }
            set { BackingStore?.Set("inventory_slot12", value); }
        }
#nullable restore
#else
        public string InventorySlot12
        {
            get { return BackingStore?.Get<string>("inventory_slot12"); }
            set { BackingStore?.Set("inventory_slot12", value); }
        }
#endif
        /// <summary>Deprecated** Inventory 12 quantity.</summary>
        public int? InventorySlot12Quantity
        {
            get { return BackingStore?.Get<int?>("inventory_slot12_quantity"); }
            set { BackingStore?.Set("inventory_slot12_quantity", value); }
        }
        /// <summary>Deprecated** Inventory slot 13.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? InventorySlot13
        {
            get { return BackingStore?.Get<string?>("inventory_slot13"); }
            set { BackingStore?.Set("inventory_slot13", value); }
        }
#nullable restore
#else
        public string InventorySlot13
        {
            get { return BackingStore?.Get<string>("inventory_slot13"); }
            set { BackingStore?.Set("inventory_slot13", value); }
        }
#endif
        /// <summary>Deprecated** Inventory 13 quantity.</summary>
        public int? InventorySlot13Quantity
        {
            get { return BackingStore?.Get<int?>("inventory_slot13_quantity"); }
            set { BackingStore?.Set("inventory_slot13_quantity", value); }
        }
        /// <summary>Deprecated** Inventory slot 14.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? InventorySlot14
        {
            get { return BackingStore?.Get<string?>("inventory_slot14"); }
            set { BackingStore?.Set("inventory_slot14", value); }
        }
#nullable restore
#else
        public string InventorySlot14
        {
            get { return BackingStore?.Get<string>("inventory_slot14"); }
            set { BackingStore?.Set("inventory_slot14", value); }
        }
#endif
        /// <summary>Deprecated** Inventory 14 quantity.</summary>
        public int? InventorySlot14Quantity
        {
            get { return BackingStore?.Get<int?>("inventory_slot14_quantity"); }
            set { BackingStore?.Set("inventory_slot14_quantity", value); }
        }
        /// <summary>Deprecated** Inventory slot 15.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? InventorySlot15
        {
            get { return BackingStore?.Get<string?>("inventory_slot15"); }
            set { BackingStore?.Set("inventory_slot15", value); }
        }
#nullable restore
#else
        public string InventorySlot15
        {
            get { return BackingStore?.Get<string>("inventory_slot15"); }
            set { BackingStore?.Set("inventory_slot15", value); }
        }
#endif
        /// <summary>Deprecated** Inventory 15 quantity.</summary>
        public int? InventorySlot15Quantity
        {
            get { return BackingStore?.Get<int?>("inventory_slot15_quantity"); }
            set { BackingStore?.Set("inventory_slot15_quantity", value); }
        }
        /// <summary>Deprecated** Inventory slot 16.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? InventorySlot16
        {
            get { return BackingStore?.Get<string?>("inventory_slot16"); }
            set { BackingStore?.Set("inventory_slot16", value); }
        }
#nullable restore
#else
        public string InventorySlot16
        {
            get { return BackingStore?.Get<string>("inventory_slot16"); }
            set { BackingStore?.Set("inventory_slot16", value); }
        }
#endif
        /// <summary>Deprecated** Inventory 16 quantity.</summary>
        public int? InventorySlot16Quantity
        {
            get { return BackingStore?.Get<int?>("inventory_slot16_quantity"); }
            set { BackingStore?.Set("inventory_slot16_quantity", value); }
        }
        /// <summary>Deprecated** Inventory slot 17.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? InventorySlot17
        {
            get { return BackingStore?.Get<string?>("inventory_slot17"); }
            set { BackingStore?.Set("inventory_slot17", value); }
        }
#nullable restore
#else
        public string InventorySlot17
        {
            get { return BackingStore?.Get<string>("inventory_slot17"); }
            set { BackingStore?.Set("inventory_slot17", value); }
        }
#endif
        /// <summary>Deprecated** Inventory 17 quantity.</summary>
        public int? InventorySlot17Quantity
        {
            get { return BackingStore?.Get<int?>("inventory_slot17_quantity"); }
            set { BackingStore?.Set("inventory_slot17_quantity", value); }
        }
        /// <summary>Deprecated** Inventory slot 18.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? InventorySlot18
        {
            get { return BackingStore?.Get<string?>("inventory_slot18"); }
            set { BackingStore?.Set("inventory_slot18", value); }
        }
#nullable restore
#else
        public string InventorySlot18
        {
            get { return BackingStore?.Get<string>("inventory_slot18"); }
            set { BackingStore?.Set("inventory_slot18", value); }
        }
#endif
        /// <summary>Deprecated** Inventory 18 quantity.</summary>
        public int? InventorySlot18Quantity
        {
            get { return BackingStore?.Get<int?>("inventory_slot18_quantity"); }
            set { BackingStore?.Set("inventory_slot18_quantity", value); }
        }
        /// <summary>Deprecated** Inventory slot 19.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? InventorySlot19
        {
            get { return BackingStore?.Get<string?>("inventory_slot19"); }
            set { BackingStore?.Set("inventory_slot19", value); }
        }
#nullable restore
#else
        public string InventorySlot19
        {
            get { return BackingStore?.Get<string>("inventory_slot19"); }
            set { BackingStore?.Set("inventory_slot19", value); }
        }
#endif
        /// <summary>Deprecated** Inventory 19 quantity.</summary>
        public int? InventorySlot19Quantity
        {
            get { return BackingStore?.Get<int?>("inventory_slot19_quantity"); }
            set { BackingStore?.Set("inventory_slot19_quantity", value); }
        }
        /// <summary>Deprecated** Inventory 1 quantity.</summary>
        public int? InventorySlot1Quantity
        {
            get { return BackingStore?.Get<int?>("inventory_slot1_quantity"); }
            set { BackingStore?.Set("inventory_slot1_quantity", value); }
        }
        /// <summary>Deprecated** Inventory slot 2.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? InventorySlot2
        {
            get { return BackingStore?.Get<string?>("inventory_slot2"); }
            set { BackingStore?.Set("inventory_slot2", value); }
        }
#nullable restore
#else
        public string InventorySlot2
        {
            get { return BackingStore?.Get<string>("inventory_slot2"); }
            set { BackingStore?.Set("inventory_slot2", value); }
        }
#endif
        /// <summary>Deprecated** Inventory slot 20.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? InventorySlot20
        {
            get { return BackingStore?.Get<string?>("inventory_slot20"); }
            set { BackingStore?.Set("inventory_slot20", value); }
        }
#nullable restore
#else
        public string InventorySlot20
        {
            get { return BackingStore?.Get<string>("inventory_slot20"); }
            set { BackingStore?.Set("inventory_slot20", value); }
        }
#endif
        /// <summary>Deprecated** Inventory 20 quantity.</summary>
        public int? InventorySlot20Quantity
        {
            get { return BackingStore?.Get<int?>("inventory_slot20_quantity"); }
            set { BackingStore?.Set("inventory_slot20_quantity", value); }
        }
        /// <summary>Deprecated** Inventory 2 quantity.</summary>
        public int? InventorySlot2Quantity
        {
            get { return BackingStore?.Get<int?>("inventory_slot2_quantity"); }
            set { BackingStore?.Set("inventory_slot2_quantity", value); }
        }
        /// <summary>Deprecated** Inventory slot 3.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? InventorySlot3
        {
            get { return BackingStore?.Get<string?>("inventory_slot3"); }
            set { BackingStore?.Set("inventory_slot3", value); }
        }
#nullable restore
#else
        public string InventorySlot3
        {
            get { return BackingStore?.Get<string>("inventory_slot3"); }
            set { BackingStore?.Set("inventory_slot3", value); }
        }
#endif
        /// <summary>Deprecated** Inventory 3 quantity.</summary>
        public int? InventorySlot3Quantity
        {
            get { return BackingStore?.Get<int?>("inventory_slot3_quantity"); }
            set { BackingStore?.Set("inventory_slot3_quantity", value); }
        }
        /// <summary>Deprecated** Inventory slot 4.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? InventorySlot4
        {
            get { return BackingStore?.Get<string?>("inventory_slot4"); }
            set { BackingStore?.Set("inventory_slot4", value); }
        }
#nullable restore
#else
        public string InventorySlot4
        {
            get { return BackingStore?.Get<string>("inventory_slot4"); }
            set { BackingStore?.Set("inventory_slot4", value); }
        }
#endif
        /// <summary>Deprecated** Inventory 4 quantity.</summary>
        public int? InventorySlot4Quantity
        {
            get { return BackingStore?.Get<int?>("inventory_slot4_quantity"); }
            set { BackingStore?.Set("inventory_slot4_quantity", value); }
        }
        /// <summary>Deprecated** Inventory slot 5.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? InventorySlot5
        {
            get { return BackingStore?.Get<string?>("inventory_slot5"); }
            set { BackingStore?.Set("inventory_slot5", value); }
        }
#nullable restore
#else
        public string InventorySlot5
        {
            get { return BackingStore?.Get<string>("inventory_slot5"); }
            set { BackingStore?.Set("inventory_slot5", value); }
        }
#endif
        /// <summary>Deprecated** Inventory 5 quantity.</summary>
        public int? InventorySlot5Quantity
        {
            get { return BackingStore?.Get<int?>("inventory_slot5_quantity"); }
            set { BackingStore?.Set("inventory_slot5_quantity", value); }
        }
        /// <summary>Deprecated** Inventory slot 6.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? InventorySlot6
        {
            get { return BackingStore?.Get<string?>("inventory_slot6"); }
            set { BackingStore?.Set("inventory_slot6", value); }
        }
#nullable restore
#else
        public string InventorySlot6
        {
            get { return BackingStore?.Get<string>("inventory_slot6"); }
            set { BackingStore?.Set("inventory_slot6", value); }
        }
#endif
        /// <summary>Deprecated** Inventory 6 quantity.</summary>
        public int? InventorySlot6Quantity
        {
            get { return BackingStore?.Get<int?>("inventory_slot6_quantity"); }
            set { BackingStore?.Set("inventory_slot6_quantity", value); }
        }
        /// <summary>Deprecated** Inventory slot 7.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? InventorySlot7
        {
            get { return BackingStore?.Get<string?>("inventory_slot7"); }
            set { BackingStore?.Set("inventory_slot7", value); }
        }
#nullable restore
#else
        public string InventorySlot7
        {
            get { return BackingStore?.Get<string>("inventory_slot7"); }
            set { BackingStore?.Set("inventory_slot7", value); }
        }
#endif
        /// <summary>Deprecated** Inventory 7 quantity.</summary>
        public int? InventorySlot7Quantity
        {
            get { return BackingStore?.Get<int?>("inventory_slot7_quantity"); }
            set { BackingStore?.Set("inventory_slot7_quantity", value); }
        }
        /// <summary>Deprecated** Inventory slot 8.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? InventorySlot8
        {
            get { return BackingStore?.Get<string?>("inventory_slot8"); }
            set { BackingStore?.Set("inventory_slot8", value); }
        }
#nullable restore
#else
        public string InventorySlot8
        {
            get { return BackingStore?.Get<string>("inventory_slot8"); }
            set { BackingStore?.Set("inventory_slot8", value); }
        }
#endif
        /// <summary>Deprecated** Inventory 8 quantity.</summary>
        public int? InventorySlot8Quantity
        {
            get { return BackingStore?.Get<int?>("inventory_slot8_quantity"); }
            set { BackingStore?.Set("inventory_slot8_quantity", value); }
        }
        /// <summary>Deprecated** Inventory slot 9.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? InventorySlot9
        {
            get { return BackingStore?.Get<string?>("inventory_slot9"); }
            set { BackingStore?.Set("inventory_slot9", value); }
        }
#nullable restore
#else
        public string InventorySlot9
        {
            get { return BackingStore?.Get<string>("inventory_slot9"); }
            set { BackingStore?.Set("inventory_slot9", value); }
        }
#endif
        /// <summary>Deprecated** Inventory 9 quantity.</summary>
        public int? InventorySlot9Quantity
        {
            get { return BackingStore?.Get<int?>("inventory_slot9_quantity"); }
            set { BackingStore?.Set("inventory_slot9_quantity", value); }
        }
        /// <summary>Jewelrycrafting level.</summary>
        public int? JewelrycraftingLevel
        {
            get { return BackingStore?.Get<int?>("jewelrycrafting_level"); }
            set { BackingStore?.Set("jewelrycrafting_level", value); }
        }
        /// <summary>Jewelrycrafting XP required to level up the skill.</summary>
        public int? JewelrycraftingMaxXp
        {
            get { return BackingStore?.Get<int?>("jewelrycrafting_max_xp"); }
            set { BackingStore?.Set("jewelrycrafting_max_xp", value); }
        }
        /// <summary>The current xp level of the Jewelrycrafting skill.</summary>
        public int? JewelrycraftingXp
        {
            get { return BackingStore?.Get<int?>("jewelrycrafting_xp"); }
            set { BackingStore?.Set("jewelrycrafting_xp", value); }
        }
        /// <summary>Leg armor slot.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? LegArmorSlot
        {
            get { return BackingStore?.Get<string?>("leg_armor_slot"); }
            set { BackingStore?.Set("leg_armor_slot", value); }
        }
#nullable restore
#else
        public string LegArmorSlot
        {
            get { return BackingStore?.Get<string>("leg_armor_slot"); }
            set { BackingStore?.Set("leg_armor_slot", value); }
        }
#endif
        /// <summary>Combat level.</summary>
        public int? Level
        {
            get { return BackingStore?.Get<int?>("level"); }
            set { BackingStore?.Set("level", value); }
        }
        /// <summary>XP required to level up the character.</summary>
        public int? MaxXp
        {
            get { return BackingStore?.Get<int?>("max_xp"); }
            set { BackingStore?.Set("max_xp", value); }
        }
        /// <summary>Mining level.</summary>
        public int? MiningLevel
        {
            get { return BackingStore?.Get<int?>("mining_level"); }
            set { BackingStore?.Set("mining_level", value); }
        }
        /// <summary>Mining XP required to level up the skill.</summary>
        public int? MiningMaxXp
        {
            get { return BackingStore?.Get<int?>("mining_max_xp"); }
            set { BackingStore?.Set("mining_max_xp", value); }
        }
        /// <summary>The current xp level of the Mining skill.</summary>
        public int? MiningXp
        {
            get { return BackingStore?.Get<int?>("mining_xp"); }
            set { BackingStore?.Set("mining_xp", value); }
        }
        /// <summary>Name of the character.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Name
        {
            get { return BackingStore?.Get<string?>("name"); }
            set { BackingStore?.Set("name", value); }
        }
#nullable restore
#else
        public string Name
        {
            get { return BackingStore?.Get<string>("name"); }
            set { BackingStore?.Set("name", value); }
        }
#endif
        /// <summary>% Air resistance.</summary>
        public int? ResAir
        {
            get { return BackingStore?.Get<int?>("res_air"); }
            set { BackingStore?.Set("res_air", value); }
        }
        /// <summary>% Earth resistance.</summary>
        public int? ResEarth
        {
            get { return BackingStore?.Get<int?>("res_earth"); }
            set { BackingStore?.Set("res_earth", value); }
        }
        /// <summary>% Fire resistance.</summary>
        public int? ResFire
        {
            get { return BackingStore?.Get<int?>("res_fire"); }
            set { BackingStore?.Set("res_fire", value); }
        }
        /// <summary>% Water resistance.</summary>
        public int? ResWater
        {
            get { return BackingStore?.Get<int?>("res_water"); }
            set { BackingStore?.Set("res_water", value); }
        }
        /// <summary>Ring 1 slot.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Ring1Slot
        {
            get { return BackingStore?.Get<string?>("ring1_slot"); }
            set { BackingStore?.Set("ring1_slot", value); }
        }
#nullable restore
#else
        public string Ring1Slot
        {
            get { return BackingStore?.Get<string>("ring1_slot"); }
            set { BackingStore?.Set("ring1_slot", value); }
        }
#endif
        /// <summary>Ring 2 slot.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Ring2Slot
        {
            get { return BackingStore?.Get<string?>("ring2_slot"); }
            set { BackingStore?.Set("ring2_slot", value); }
        }
#nullable restore
#else
        public string Ring2Slot
        {
            get { return BackingStore?.Get<string>("ring2_slot"); }
            set { BackingStore?.Set("ring2_slot", value); }
        }
#endif
        /// <summary>Shield slot.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ShieldSlot
        {
            get { return BackingStore?.Get<string?>("shield_slot"); }
            set { BackingStore?.Set("shield_slot", value); }
        }
#nullable restore
#else
        public string ShieldSlot
        {
            get { return BackingStore?.Get<string>("shield_slot"); }
            set { BackingStore?.Set("shield_slot", value); }
        }
#endif
        /// <summary>Character skin code.</summary>
        public global::ArtifactsMmoDotNet.Api.Generated.Models.CharacterSchema_skin? Skin
        {
            get { return BackingStore?.Get<global::ArtifactsMmoDotNet.Api.Generated.Models.CharacterSchema_skin?>("skin"); }
            set { BackingStore?.Set("skin", value); }
        }
        /// <summary>*Not available, on the roadmap. Character movement speed.</summary>
        public int? Speed
        {
            get { return BackingStore?.Get<int?>("speed"); }
            set { BackingStore?.Set("speed", value); }
        }
        /// <summary>*Not available, on the roadmap. Regenerates life at the start of each turn.</summary>
        public int? Stamina
        {
            get { return BackingStore?.Get<int?>("stamina"); }
            set { BackingStore?.Set("stamina", value); }
        }
        /// <summary>Task in progress.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Task
        {
            get { return BackingStore?.Get<string?>("task"); }
            set { BackingStore?.Set("task", value); }
        }
#nullable restore
#else
        public string Task
        {
            get { return BackingStore?.Get<string>("task"); }
            set { BackingStore?.Set("task", value); }
        }
#endif
        /// <summary>Task progression.</summary>
        public int? TaskProgress
        {
            get { return BackingStore?.Get<int?>("task_progress"); }
            set { BackingStore?.Set("task_progress", value); }
        }
        /// <summary>Task total objective.</summary>
        public int? TaskTotal
        {
            get { return BackingStore?.Get<int?>("task_total"); }
            set { BackingStore?.Set("task_total", value); }
        }
        /// <summary>Task type.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? TaskType
        {
            get { return BackingStore?.Get<string?>("task_type"); }
            set { BackingStore?.Set("task_type", value); }
        }
#nullable restore
#else
        public string TaskType
        {
            get { return BackingStore?.Get<string>("task_type"); }
            set { BackingStore?.Set("task_type", value); }
        }
#endif
        /// <summary>Total XP of your character.</summary>
        public int? TotalXp
        {
            get { return BackingStore?.Get<int?>("total_xp"); }
            set { BackingStore?.Set("total_xp", value); }
        }
        /// <summary>Weaponcrafting level.</summary>
        public int? WeaponcraftingLevel
        {
            get { return BackingStore?.Get<int?>("weaponcrafting_level"); }
            set { BackingStore?.Set("weaponcrafting_level", value); }
        }
        /// <summary>Weaponcrafting XP required to level up the skill.</summary>
        public int? WeaponcraftingMaxXp
        {
            get { return BackingStore?.Get<int?>("weaponcrafting_max_xp"); }
            set { BackingStore?.Set("weaponcrafting_max_xp", value); }
        }
        /// <summary>The current xp level of the Weaponcrafting skill.</summary>
        public int? WeaponcraftingXp
        {
            get { return BackingStore?.Get<int?>("weaponcrafting_xp"); }
            set { BackingStore?.Set("weaponcrafting_xp", value); }
        }
        /// <summary>Weapon slot.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? WeaponSlot
        {
            get { return BackingStore?.Get<string?>("weapon_slot"); }
            set { BackingStore?.Set("weapon_slot", value); }
        }
#nullable restore
#else
        public string WeaponSlot
        {
            get { return BackingStore?.Get<string>("weapon_slot"); }
            set { BackingStore?.Set("weapon_slot", value); }
        }
#endif
        /// <summary>Woodcutting level.</summary>
        public int? WoodcuttingLevel
        {
            get { return BackingStore?.Get<int?>("woodcutting_level"); }
            set { BackingStore?.Set("woodcutting_level", value); }
        }
        /// <summary>Woodcutting XP required to level up the skill.</summary>
        public int? WoodcuttingMaxXp
        {
            get { return BackingStore?.Get<int?>("woodcutting_max_xp"); }
            set { BackingStore?.Set("woodcutting_max_xp", value); }
        }
        /// <summary>The current xp level of the Woodcutting skill.</summary>
        public int? WoodcuttingXp
        {
            get { return BackingStore?.Get<int?>("woodcutting_xp"); }
            set { BackingStore?.Set("woodcutting_xp", value); }
        }
        /// <summary>Character x coordinate.</summary>
        public int? X
        {
            get { return BackingStore?.Get<int?>("x"); }
            set { BackingStore?.Set("x", value); }
        }
        /// <summary>The current xp level of the combat level.</summary>
        public int? Xp
        {
            get { return BackingStore?.Get<int?>("xp"); }
            set { BackingStore?.Set("xp", value); }
        }
        /// <summary>Character y coordinate.</summary>
        public int? Y
        {
            get { return BackingStore?.Get<int?>("y"); }
            set { BackingStore?.Set("y", value); }
        }
        /// <summary>
        /// Instantiates a new <see cref="global::ArtifactsMmoDotNet.Api.Generated.Models.CharacterSchema"/> and sets the default values.
        /// </summary>
        public CharacterSchema()
        {
            BackingStore = BackingStoreFactorySingleton.Instance.CreateBackingStore();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::ArtifactsMmoDotNet.Api.Generated.Models.CharacterSchema"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::ArtifactsMmoDotNet.Api.Generated.Models.CharacterSchema CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::ArtifactsMmoDotNet.Api.Generated.Models.CharacterSchema();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "amulet_slot", n => { AmuletSlot = n.GetStringValue(); } },
                { "artifact1_slot", n => { Artifact1Slot = n.GetStringValue(); } },
                { "artifact2_slot", n => { Artifact2Slot = n.GetStringValue(); } },
                { "artifact3_slot", n => { Artifact3Slot = n.GetStringValue(); } },
                { "attack_air", n => { AttackAir = n.GetIntValue(); } },
                { "attack_earth", n => { AttackEarth = n.GetIntValue(); } },
                { "attack_fire", n => { AttackFire = n.GetIntValue(); } },
                { "attack_water", n => { AttackWater = n.GetIntValue(); } },
                { "body_armor_slot", n => { BodyArmorSlot = n.GetStringValue(); } },
                { "boots_slot", n => { BootsSlot = n.GetStringValue(); } },
                { "consumable1_slot", n => { Consumable1Slot = n.GetStringValue(); } },
                { "consumable1_slot_quantity", n => { Consumable1SlotQuantity = n.GetIntValue(); } },
                { "consumable2_slot", n => { Consumable2Slot = n.GetStringValue(); } },
                { "consumable2_slot_quantity", n => { Consumable2SlotQuantity = n.GetIntValue(); } },
                { "cooking_level", n => { CookingLevel = n.GetIntValue(); } },
                { "cooking_max_xp", n => { CookingMaxXp = n.GetIntValue(); } },
                { "cooking_xp", n => { CookingXp = n.GetIntValue(); } },
                { "cooldown", n => { Cooldown = n.GetIntValue(); } },
                { "cooldown_expiration", n => { CooldownExpiration = n.GetObjectValue<global::ArtifactsMmoDotNet.Api.Generated.Models.CharacterSchema.CharacterSchema_cooldown_expiration>(global::ArtifactsMmoDotNet.Api.Generated.Models.CharacterSchema.CharacterSchema_cooldown_expiration.CreateFromDiscriminatorValue); } },
                { "critical_strike", n => { CriticalStrike = n.GetIntValue(); } },
                { "dmg_air", n => { DmgAir = n.GetIntValue(); } },
                { "dmg_earth", n => { DmgEarth = n.GetIntValue(); } },
                { "dmg_fire", n => { DmgFire = n.GetIntValue(); } },
                { "dmg_water", n => { DmgWater = n.GetIntValue(); } },
                { "fishing_level", n => { FishingLevel = n.GetIntValue(); } },
                { "fishing_max_xp", n => { FishingMaxXp = n.GetIntValue(); } },
                { "fishing_xp", n => { FishingXp = n.GetIntValue(); } },
                { "gearcrafting_level", n => { GearcraftingLevel = n.GetIntValue(); } },
                { "gearcrafting_max_xp", n => { GearcraftingMaxXp = n.GetIntValue(); } },
                { "gearcrafting_xp", n => { GearcraftingXp = n.GetIntValue(); } },
                { "gold", n => { Gold = n.GetIntValue(); } },
                { "haste", n => { Haste = n.GetIntValue(); } },
                { "helmet_slot", n => { HelmetSlot = n.GetStringValue(); } },
                { "hp", n => { Hp = n.GetIntValue(); } },
                { "inventory", n => { Inventory = n.GetCollectionOfObjectValues<global::ArtifactsMmoDotNet.Api.Generated.Models.InventorySlot>(global::ArtifactsMmoDotNet.Api.Generated.Models.InventorySlot.CreateFromDiscriminatorValue)?.AsList(); } },
                { "inventory_max_items", n => { InventoryMaxItems = n.GetIntValue(); } },
                { "inventory_slot1", n => { InventorySlot1 = n.GetStringValue(); } },
                { "inventory_slot10", n => { InventorySlot10 = n.GetStringValue(); } },
                { "inventory_slot10_quantity", n => { InventorySlot10Quantity = n.GetIntValue(); } },
                { "inventory_slot11", n => { InventorySlot11 = n.GetStringValue(); } },
                { "inventory_slot11_quantity", n => { InventorySlot11Quantity = n.GetIntValue(); } },
                { "inventory_slot12", n => { InventorySlot12 = n.GetStringValue(); } },
                { "inventory_slot12_quantity", n => { InventorySlot12Quantity = n.GetIntValue(); } },
                { "inventory_slot13", n => { InventorySlot13 = n.GetStringValue(); } },
                { "inventory_slot13_quantity", n => { InventorySlot13Quantity = n.GetIntValue(); } },
                { "inventory_slot14", n => { InventorySlot14 = n.GetStringValue(); } },
                { "inventory_slot14_quantity", n => { InventorySlot14Quantity = n.GetIntValue(); } },
                { "inventory_slot15", n => { InventorySlot15 = n.GetStringValue(); } },
                { "inventory_slot15_quantity", n => { InventorySlot15Quantity = n.GetIntValue(); } },
                { "inventory_slot16", n => { InventorySlot16 = n.GetStringValue(); } },
                { "inventory_slot16_quantity", n => { InventorySlot16Quantity = n.GetIntValue(); } },
                { "inventory_slot17", n => { InventorySlot17 = n.GetStringValue(); } },
                { "inventory_slot17_quantity", n => { InventorySlot17Quantity = n.GetIntValue(); } },
                { "inventory_slot18", n => { InventorySlot18 = n.GetStringValue(); } },
                { "inventory_slot18_quantity", n => { InventorySlot18Quantity = n.GetIntValue(); } },
                { "inventory_slot19", n => { InventorySlot19 = n.GetStringValue(); } },
                { "inventory_slot19_quantity", n => { InventorySlot19Quantity = n.GetIntValue(); } },
                { "inventory_slot1_quantity", n => { InventorySlot1Quantity = n.GetIntValue(); } },
                { "inventory_slot2", n => { InventorySlot2 = n.GetStringValue(); } },
                { "inventory_slot20", n => { InventorySlot20 = n.GetStringValue(); } },
                { "inventory_slot20_quantity", n => { InventorySlot20Quantity = n.GetIntValue(); } },
                { "inventory_slot2_quantity", n => { InventorySlot2Quantity = n.GetIntValue(); } },
                { "inventory_slot3", n => { InventorySlot3 = n.GetStringValue(); } },
                { "inventory_slot3_quantity", n => { InventorySlot3Quantity = n.GetIntValue(); } },
                { "inventory_slot4", n => { InventorySlot4 = n.GetStringValue(); } },
                { "inventory_slot4_quantity", n => { InventorySlot4Quantity = n.GetIntValue(); } },
                { "inventory_slot5", n => { InventorySlot5 = n.GetStringValue(); } },
                { "inventory_slot5_quantity", n => { InventorySlot5Quantity = n.GetIntValue(); } },
                { "inventory_slot6", n => { InventorySlot6 = n.GetStringValue(); } },
                { "inventory_slot6_quantity", n => { InventorySlot6Quantity = n.GetIntValue(); } },
                { "inventory_slot7", n => { InventorySlot7 = n.GetStringValue(); } },
                { "inventory_slot7_quantity", n => { InventorySlot7Quantity = n.GetIntValue(); } },
                { "inventory_slot8", n => { InventorySlot8 = n.GetStringValue(); } },
                { "inventory_slot8_quantity", n => { InventorySlot8Quantity = n.GetIntValue(); } },
                { "inventory_slot9", n => { InventorySlot9 = n.GetStringValue(); } },
                { "inventory_slot9_quantity", n => { InventorySlot9Quantity = n.GetIntValue(); } },
                { "jewelrycrafting_level", n => { JewelrycraftingLevel = n.GetIntValue(); } },
                { "jewelrycrafting_max_xp", n => { JewelrycraftingMaxXp = n.GetIntValue(); } },
                { "jewelrycrafting_xp", n => { JewelrycraftingXp = n.GetIntValue(); } },
                { "leg_armor_slot", n => { LegArmorSlot = n.GetStringValue(); } },
                { "level", n => { Level = n.GetIntValue(); } },
                { "max_xp", n => { MaxXp = n.GetIntValue(); } },
                { "mining_level", n => { MiningLevel = n.GetIntValue(); } },
                { "mining_max_xp", n => { MiningMaxXp = n.GetIntValue(); } },
                { "mining_xp", n => { MiningXp = n.GetIntValue(); } },
                { "name", n => { Name = n.GetStringValue(); } },
                { "res_air", n => { ResAir = n.GetIntValue(); } },
                { "res_earth", n => { ResEarth = n.GetIntValue(); } },
                { "res_fire", n => { ResFire = n.GetIntValue(); } },
                { "res_water", n => { ResWater = n.GetIntValue(); } },
                { "ring1_slot", n => { Ring1Slot = n.GetStringValue(); } },
                { "ring2_slot", n => { Ring2Slot = n.GetStringValue(); } },
                { "shield_slot", n => { ShieldSlot = n.GetStringValue(); } },
                { "skin", n => { Skin = n.GetEnumValue<global::ArtifactsMmoDotNet.Api.Generated.Models.CharacterSchema_skin>(); } },
                { "speed", n => { Speed = n.GetIntValue(); } },
                { "stamina", n => { Stamina = n.GetIntValue(); } },
                { "task", n => { Task = n.GetStringValue(); } },
                { "task_progress", n => { TaskProgress = n.GetIntValue(); } },
                { "task_total", n => { TaskTotal = n.GetIntValue(); } },
                { "task_type", n => { TaskType = n.GetStringValue(); } },
                { "total_xp", n => { TotalXp = n.GetIntValue(); } },
                { "weapon_slot", n => { WeaponSlot = n.GetStringValue(); } },
                { "weaponcrafting_level", n => { WeaponcraftingLevel = n.GetIntValue(); } },
                { "weaponcrafting_max_xp", n => { WeaponcraftingMaxXp = n.GetIntValue(); } },
                { "weaponcrafting_xp", n => { WeaponcraftingXp = n.GetIntValue(); } },
                { "woodcutting_level", n => { WoodcuttingLevel = n.GetIntValue(); } },
                { "woodcutting_max_xp", n => { WoodcuttingMaxXp = n.GetIntValue(); } },
                { "woodcutting_xp", n => { WoodcuttingXp = n.GetIntValue(); } },
                { "x", n => { X = n.GetIntValue(); } },
                { "xp", n => { Xp = n.GetIntValue(); } },
                { "y", n => { Y = n.GetIntValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("amulet_slot", AmuletSlot);
            writer.WriteStringValue("artifact1_slot", Artifact1Slot);
            writer.WriteStringValue("artifact2_slot", Artifact2Slot);
            writer.WriteStringValue("artifact3_slot", Artifact3Slot);
            writer.WriteIntValue("attack_air", AttackAir);
            writer.WriteIntValue("attack_earth", AttackEarth);
            writer.WriteIntValue("attack_fire", AttackFire);
            writer.WriteIntValue("attack_water", AttackWater);
            writer.WriteStringValue("body_armor_slot", BodyArmorSlot);
            writer.WriteStringValue("boots_slot", BootsSlot);
            writer.WriteStringValue("consumable1_slot", Consumable1Slot);
            writer.WriteIntValue("consumable1_slot_quantity", Consumable1SlotQuantity);
            writer.WriteStringValue("consumable2_slot", Consumable2Slot);
            writer.WriteIntValue("consumable2_slot_quantity", Consumable2SlotQuantity);
            writer.WriteIntValue("cooking_level", CookingLevel);
            writer.WriteIntValue("cooking_max_xp", CookingMaxXp);
            writer.WriteIntValue("cooking_xp", CookingXp);
            writer.WriteIntValue("cooldown", Cooldown);
            writer.WriteObjectValue<global::ArtifactsMmoDotNet.Api.Generated.Models.CharacterSchema.CharacterSchema_cooldown_expiration>("cooldown_expiration", CooldownExpiration);
            writer.WriteIntValue("critical_strike", CriticalStrike);
            writer.WriteIntValue("dmg_air", DmgAir);
            writer.WriteIntValue("dmg_earth", DmgEarth);
            writer.WriteIntValue("dmg_fire", DmgFire);
            writer.WriteIntValue("dmg_water", DmgWater);
            writer.WriteIntValue("fishing_level", FishingLevel);
            writer.WriteIntValue("fishing_max_xp", FishingMaxXp);
            writer.WriteIntValue("fishing_xp", FishingXp);
            writer.WriteIntValue("gearcrafting_level", GearcraftingLevel);
            writer.WriteIntValue("gearcrafting_max_xp", GearcraftingMaxXp);
            writer.WriteIntValue("gearcrafting_xp", GearcraftingXp);
            writer.WriteIntValue("gold", Gold);
            writer.WriteIntValue("haste", Haste);
            writer.WriteStringValue("helmet_slot", HelmetSlot);
            writer.WriteIntValue("hp", Hp);
            writer.WriteCollectionOfObjectValues<global::ArtifactsMmoDotNet.Api.Generated.Models.InventorySlot>("inventory", Inventory);
            writer.WriteIntValue("inventory_max_items", InventoryMaxItems);
            writer.WriteStringValue("inventory_slot1", InventorySlot1);
            writer.WriteStringValue("inventory_slot10", InventorySlot10);
            writer.WriteIntValue("inventory_slot10_quantity", InventorySlot10Quantity);
            writer.WriteStringValue("inventory_slot11", InventorySlot11);
            writer.WriteIntValue("inventory_slot11_quantity", InventorySlot11Quantity);
            writer.WriteStringValue("inventory_slot12", InventorySlot12);
            writer.WriteIntValue("inventory_slot12_quantity", InventorySlot12Quantity);
            writer.WriteStringValue("inventory_slot13", InventorySlot13);
            writer.WriteIntValue("inventory_slot13_quantity", InventorySlot13Quantity);
            writer.WriteStringValue("inventory_slot14", InventorySlot14);
            writer.WriteIntValue("inventory_slot14_quantity", InventorySlot14Quantity);
            writer.WriteStringValue("inventory_slot15", InventorySlot15);
            writer.WriteIntValue("inventory_slot15_quantity", InventorySlot15Quantity);
            writer.WriteStringValue("inventory_slot16", InventorySlot16);
            writer.WriteIntValue("inventory_slot16_quantity", InventorySlot16Quantity);
            writer.WriteStringValue("inventory_slot17", InventorySlot17);
            writer.WriteIntValue("inventory_slot17_quantity", InventorySlot17Quantity);
            writer.WriteStringValue("inventory_slot18", InventorySlot18);
            writer.WriteIntValue("inventory_slot18_quantity", InventorySlot18Quantity);
            writer.WriteStringValue("inventory_slot19", InventorySlot19);
            writer.WriteIntValue("inventory_slot19_quantity", InventorySlot19Quantity);
            writer.WriteIntValue("inventory_slot1_quantity", InventorySlot1Quantity);
            writer.WriteStringValue("inventory_slot2", InventorySlot2);
            writer.WriteStringValue("inventory_slot20", InventorySlot20);
            writer.WriteIntValue("inventory_slot20_quantity", InventorySlot20Quantity);
            writer.WriteIntValue("inventory_slot2_quantity", InventorySlot2Quantity);
            writer.WriteStringValue("inventory_slot3", InventorySlot3);
            writer.WriteIntValue("inventory_slot3_quantity", InventorySlot3Quantity);
            writer.WriteStringValue("inventory_slot4", InventorySlot4);
            writer.WriteIntValue("inventory_slot4_quantity", InventorySlot4Quantity);
            writer.WriteStringValue("inventory_slot5", InventorySlot5);
            writer.WriteIntValue("inventory_slot5_quantity", InventorySlot5Quantity);
            writer.WriteStringValue("inventory_slot6", InventorySlot6);
            writer.WriteIntValue("inventory_slot6_quantity", InventorySlot6Quantity);
            writer.WriteStringValue("inventory_slot7", InventorySlot7);
            writer.WriteIntValue("inventory_slot7_quantity", InventorySlot7Quantity);
            writer.WriteStringValue("inventory_slot8", InventorySlot8);
            writer.WriteIntValue("inventory_slot8_quantity", InventorySlot8Quantity);
            writer.WriteStringValue("inventory_slot9", InventorySlot9);
            writer.WriteIntValue("inventory_slot9_quantity", InventorySlot9Quantity);
            writer.WriteIntValue("jewelrycrafting_level", JewelrycraftingLevel);
            writer.WriteIntValue("jewelrycrafting_max_xp", JewelrycraftingMaxXp);
            writer.WriteIntValue("jewelrycrafting_xp", JewelrycraftingXp);
            writer.WriteStringValue("leg_armor_slot", LegArmorSlot);
            writer.WriteIntValue("level", Level);
            writer.WriteIntValue("max_xp", MaxXp);
            writer.WriteIntValue("mining_level", MiningLevel);
            writer.WriteIntValue("mining_max_xp", MiningMaxXp);
            writer.WriteIntValue("mining_xp", MiningXp);
            writer.WriteStringValue("name", Name);
            writer.WriteIntValue("res_air", ResAir);
            writer.WriteIntValue("res_earth", ResEarth);
            writer.WriteIntValue("res_fire", ResFire);
            writer.WriteIntValue("res_water", ResWater);
            writer.WriteStringValue("ring1_slot", Ring1Slot);
            writer.WriteStringValue("ring2_slot", Ring2Slot);
            writer.WriteStringValue("shield_slot", ShieldSlot);
            writer.WriteEnumValue<global::ArtifactsMmoDotNet.Api.Generated.Models.CharacterSchema_skin>("skin", Skin);
            writer.WriteIntValue("speed", Speed);
            writer.WriteIntValue("stamina", Stamina);
            writer.WriteStringValue("task", Task);
            writer.WriteIntValue("task_progress", TaskProgress);
            writer.WriteIntValue("task_total", TaskTotal);
            writer.WriteStringValue("task_type", TaskType);
            writer.WriteIntValue("total_xp", TotalXp);
            writer.WriteIntValue("weaponcrafting_level", WeaponcraftingLevel);
            writer.WriteIntValue("weaponcrafting_max_xp", WeaponcraftingMaxXp);
            writer.WriteIntValue("weaponcrafting_xp", WeaponcraftingXp);
            writer.WriteStringValue("weapon_slot", WeaponSlot);
            writer.WriteIntValue("woodcutting_level", WoodcuttingLevel);
            writer.WriteIntValue("woodcutting_max_xp", WoodcuttingMaxXp);
            writer.WriteIntValue("woodcutting_xp", WoodcuttingXp);
            writer.WriteIntValue("x", X);
            writer.WriteIntValue("xp", Xp);
            writer.WriteIntValue("y", Y);
        }
        /// <summary>
        /// Composed type wrapper for classes <see cref="DateTimeOffset"/>, <see cref="Null"/>
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.16.0")]
        public partial class CharacterSchema_cooldown_expiration : IBackedModel, IComposedTypeWrapper, IParsable
        {
            /// <summary>Stores model information.</summary>
            public IBackingStore BackingStore { get; private set; }
            /// <summary>Composed type representation for type <see cref="DateTimeOffset"/></summary>
            public DateTimeOffset? DateTimeOffset
            {
                get { return BackingStore?.Get<DateTimeOffset?>("DateTimeOffset"); }
                set { BackingStore?.Set("DateTimeOffset", value); }
            }
            /// <summary>Composed type representation for type <see cref="Null"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public Null? Null
            {
                get { return BackingStore?.Get<Null?>("null"); }
                set { BackingStore?.Set("null", value); }
            }
#nullable restore
#else
            public Null Null
            {
                get { return BackingStore?.Get<Null>("null"); }
                set { BackingStore?.Set("null", value); }
            }
#endif
            /// <summary>
            /// Instantiates a new <see cref="global::ArtifactsMmoDotNet.Api.Generated.Models.CharacterSchema.CharacterSchema_cooldown_expiration"/> and sets the default values.
            /// </summary>
            public CharacterSchema_cooldown_expiration()
            {
                BackingStore = BackingStoreFactorySingleton.Instance.CreateBackingStore();
            }
            /// <summary>
            /// Creates a new instance of the appropriate class based on discriminator value
            /// </summary>
            /// <returns>A <see cref="global::ArtifactsMmoDotNet.Api.Generated.Models.CharacterSchema.CharacterSchema_cooldown_expiration"/></returns>
            /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
            public static global::ArtifactsMmoDotNet.Api.Generated.Models.CharacterSchema.CharacterSchema_cooldown_expiration CreateFromDiscriminatorValue(IParseNode parseNode)
            {
                _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
                var result = new global::ArtifactsMmoDotNet.Api.Generated.Models.CharacterSchema.CharacterSchema_cooldown_expiration();
                if(parseNode.GetDateTimeOffsetValue() is DateTimeOffset dateTimeOffsetValue)
                {
                    result.DateTimeOffset = dateTimeOffsetValue;
                }
                else if(parseNode.GetObjectValue<Null>(Null.CreateFromDiscriminatorValue) is Null nullValue)
                {
                    result.Null = nullValue;
                }
                return result;
            }
            /// <summary>
            /// The deserialization information for the current model
            /// </summary>
            /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
            public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
            {
                return new Dictionary<string, Action<IParseNode>>();
            }
            /// <summary>
            /// Serializes information the current object
            /// </summary>
            /// <param name="writer">Serialization writer to use to serialize this model</param>
            public virtual void Serialize(ISerializationWriter writer)
            {
                _ = writer ?? throw new ArgumentNullException(nameof(writer));
                if(DateTimeOffset != null)
                {
                    writer.WriteDateTimeOffsetValue(null, DateTimeOffset);
                }
                else if(Null != null)
                {
                    writer.WriteObjectValue<Null>(null, Null);
                }
            }
        }
    }
}
